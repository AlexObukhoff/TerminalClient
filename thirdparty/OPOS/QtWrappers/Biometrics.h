/****************************************************************************
**
** Namespace OPOS generated by dumpcpp from type library
** OPOS\CommonCO\OPOSBiometrics.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_BIOMETRICS_H
#define QAX_DUMPCPP_BIOMETRICS_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef OPOS_EXPORT
#define OPOS_EXPORT
#endif

#include <ActiveQt/QAxObject>

struct IDispatch;


// Referenced namespace

namespace OPOS {


// skipping event interface _IOPOSBiometricsEvents

class OPOS_EXPORT IOPOSBiometrics : public QAxObject
{
public:
    IOPOSBiometrics(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Algorithm

    property Algorithm

    */
    inline int Algorithm() const; //Returns the value of Algorithm
    inline void SetAlgorithm(int value); //Sets the value of the Algorithm property

    /*
    Property AlgorithmList

    property AlgorithmList

    */
    inline QString AlgorithmList() const; //Returns the value of AlgorithmList

    /*
    Property AutoDisable

    property AutoDisable

    */
    inline bool AutoDisable() const; //Returns the value of AutoDisable
    inline void SetAutoDisable(bool value); //Sets the value of the AutoDisable property

    /*
    Property BIR

    property BIR

    */
    inline QString BIR() const; //Returns the value of BIR

    /*
    Property BinaryConversion

    property BinaryConversion

    */
    inline int BinaryConversion() const; //Returns the value of BinaryConversion
    inline void SetBinaryConversion(int value); //Sets the value of the BinaryConversion property

    /*
    Property CapCompareFirmwareVersion

    property CapCompareFirmwareVersion

    */
    inline bool CapCompareFirmwareVersion() const; //Returns the value of CapCompareFirmwareVersion

    /*
    Property CapPowerReporting

    property CapPowerReporting

    */
    inline int CapPowerReporting() const; //Returns the value of CapPowerReporting

    /*
    Property CapPrematchData

    property CapPrematchData

    */
    inline bool CapPrematchData() const; //Returns the value of CapPrematchData

    /*
    Property CapRawSensorData

    property CapRawSensorData

    */
    inline bool CapRawSensorData() const; //Returns the value of CapRawSensorData

    /*
    Property CapRealTimeData

    property CapRealTimeData

    */
    inline bool CapRealTimeData() const; //Returns the value of CapRealTimeData

    /*
    Property CapSensorColor

    property CapSensorColor

    */
    inline int CapSensorColor() const; //Returns the value of CapSensorColor

    /*
    Property CapSensorOrientation

    property CapSensorOrientation

    */
    inline int CapSensorOrientation() const; //Returns the value of CapSensorOrientation

    /*
    Property CapSensorType

    property CapSensorType

    */
    inline int CapSensorType() const; //Returns the value of CapSensorType

    /*
    Property CapStatisticsReporting

    property CapStatisticsReporting

    */
    inline bool CapStatisticsReporting() const; //Returns the value of CapStatisticsReporting

    /*
    Property CapTemplateAdaptation

    property CapTemplateAdaptation

    */
    inline bool CapTemplateAdaptation() const; //Returns the value of CapTemplateAdaptation

    /*
    Property CapUpdateFirmware

    property CapUpdateFirmware

    */
    inline bool CapUpdateFirmware() const; //Returns the value of CapUpdateFirmware

    /*
    Property CapUpdateStatistics

    property CapUpdateStatistics

    */
    inline bool CapUpdateStatistics() const; //Returns the value of CapUpdateStatistics

    /*
    Property CheckHealthText

    property CheckHealthText

    */
    inline QString CheckHealthText() const; //Returns the value of CheckHealthText

    /*
    Property Claimed

    property Claimed

    */
    inline bool Claimed() const; //Returns the value of Claimed

    /*
    Property ControlObjectDescription

    property ControlObjectDescription

    */
    inline QString ControlObjectDescription() const; //Returns the value of ControlObjectDescription

    /*
    Property ControlObjectVersion

    property ControlObjectVersion

    */
    inline int ControlObjectVersion() const; //Returns the value of ControlObjectVersion

    /*
    Property DataCount

    property DataCount

    */
    inline int DataCount() const; //Returns the value of DataCount

    /*
    Property DataEventEnabled

    property DataEventEnabled

    */
    inline bool DataEventEnabled() const; //Returns the value of DataEventEnabled
    inline void SetDataEventEnabled(bool value); //Sets the value of the DataEventEnabled property

    /*
    Property DeviceDescription

    property DeviceDescription

    */
    inline QString DeviceDescription() const; //Returns the value of DeviceDescription

    /*
    Property DeviceEnabled

    property DeviceEnabled

    */
    inline bool DeviceEnabled() const; //Returns the value of DeviceEnabled
    inline void SetDeviceEnabled(bool value); //Sets the value of the DeviceEnabled property

    /*
    Property DeviceName

    property DeviceName

    */
    inline QString DeviceName() const; //Returns the value of DeviceName

    /*
    Property FreezeEvents

    property FreezeEvents

    */
    inline bool FreezeEvents() const; //Returns the value of FreezeEvents
    inline void SetFreezeEvents(bool value); //Sets the value of the FreezeEvents property

    /*
    Property OpenResult

    property OpenResult

    */
    inline int OpenResult() const; //Returns the value of OpenResult

    /*
    Property PowerNotify

    property PowerNotify

    */
    inline int PowerNotify() const; //Returns the value of PowerNotify
    inline void SetPowerNotify(int value); //Sets the value of the PowerNotify property

    /*
    Property PowerState

    property PowerState

    */
    inline int PowerState() const; //Returns the value of PowerState

    /*
    Property RawSensorData

    property RawSensorData

    */
    inline QString RawSensorData() const; //Returns the value of RawSensorData

    /*
    Property RealTimeDataEnabled

    property RealTimeDataEnabled

    */
    inline bool RealTimeDataEnabled() const; //Returns the value of RealTimeDataEnabled
    inline void SetRealTimeDataEnabled(bool value); //Sets the value of the RealTimeDataEnabled property

    /*
    Property ResultCode

    property ResultCode

    */
    inline int ResultCode() const; //Returns the value of ResultCode

    /*
    Property ResultCodeExtended

    property ResultCodeExtended

    */
    inline int ResultCodeExtended() const; //Returns the value of ResultCodeExtended

    /*
    Property SensorBPP

    property SensorBPP

    */
    inline int SensorBPP() const; //Returns the value of SensorBPP

    /*
    Property SensorColor

    property SensorColor

    */
    inline int SensorColor() const; //Returns the value of SensorColor
    inline void SetSensorColor(int value); //Sets the value of the SensorColor property

    /*
    Property SensorHeight

    property SensorHeight

    */
    inline int SensorHeight() const; //Returns the value of SensorHeight

    /*
    Property SensorOrientation

    property SensorOrientation

    */
    inline int SensorOrientation() const; //Returns the value of SensorOrientation
    inline void SetSensorOrientation(int value); //Sets the value of the SensorOrientation property

    /*
    Property SensorType

    property SensorType

    */
    inline int SensorType() const; //Returns the value of SensorType
    inline void SetSensorType(int value); //Sets the value of the SensorType property

    /*
    Property SensorWidth

    property SensorWidth

    */
    inline int SensorWidth() const; //Returns the value of SensorWidth

    /*
    Property ServiceObjectDescription

    property ServiceObjectDescription

    */
    inline QString ServiceObjectDescription() const; //Returns the value of ServiceObjectDescription

    /*
    Property ServiceObjectVersion

    property ServiceObjectVersion

    */
    inline int ServiceObjectVersion() const; //Returns the value of ServiceObjectVersion

    /*
    Property State

    property State

    */
    inline int State() const; //Returns the value of State

    /*
    Method BeginEnrollCapture

    method BeginEnrollCapture

    */
    inline int BeginEnrollCapture(const QString& ReferenceBIR, const QString& Payload);

    /*
    Method BeginVerifyCapture

    method BeginVerifyCapture

    */
    inline int BeginVerifyCapture();

    /*
    Method CheckHealth

    method CheckHealth

    */
    inline int CheckHealth(int Level);

    /*
    Method ClaimDevice

    method ClaimDevice

    */
    inline int ClaimDevice(int Timeout);

    /*
    Method ClearInput

    method ClearInput

    */
    inline int ClearInput();

    /*
    Method ClearInputProperties

    method ClearInputProperties

    */
    inline int ClearInputProperties();

    /*
    Method Close

    method Close

    */
    inline int Close();

    /*
    Method CompareFirmwareVersion

    method CompareFirmwareVersion

    */
    inline int CompareFirmwareVersion(const QString& FirmwareFileName, int& pResult);

    /*
    Method DirectIO

    method DirectIO

    */
    inline int DirectIO(int Command, int& pData, QString& pString);

    /*
    Method EndCapture

    method EndCapture

    */
    inline int EndCapture();

    /*
    Method Identify

    method Identify

    */
    inline int Identify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking, int Timeout);

    /*
    Method IdentifyMatch

    method IdentifyMatch

    */
    inline int IdentifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking);

    /*
    Method Open

    method Open

    */
    inline int Open(const QString& DeviceName);

    /*
    Method ProcessPrematchData

    method ProcessPrematchData

    */
    inline int ProcessPrematchData(const QString& CapturedBIR, const QString& PrematchDataBIR, QString& pProcessedBIR);

    /*
    Method ReleaseDevice

    method ReleaseDevice

    */
    inline int ReleaseDevice();

    /*
    Method ResetStatistics

    method ResetStatistics

    */
    inline int ResetStatistics(const QString& StatisticsBuffer);

    /*
    Method RetrieveStatistics

    method RetrieveStatistics

    */
    inline int RetrieveStatistics(QString& pStatisticsBuffer);

    /*
    Method SOData

    method SOData

    */
    inline void SOData(int Status);

    /*
    Method SODirectIO

    method SODirectIO

    */
    inline void SODirectIO(int EventNumber, int& pData, QString& pString);

    /*
    Method SOError

    method SOError

    */
    inline void SOError(int ResultCode, int ResultCodeExtended, int ErrorLocus, int& pErrorResponse);

    /*
    Method SOOutputCompleteDummy

    method SOOutputCompleteDummy

    */
    inline void SOOutputCompleteDummy(int OutputID);

    /*
    Method SOProcessID

    method SOProcessID

    */
    inline int SOProcessID();

    /*
    Method SOStatusUpdate

    method SOStatusUpdate

    */
    inline void SOStatusUpdate(int Data);

    /*
    Method UpdateFirmware

    method UpdateFirmware

    */
    inline int UpdateFirmware(const QString& FirmwareFileName);

    /*
    Method UpdateStatistics

    method UpdateStatistics

    */
    inline int UpdateStatistics(const QString& StatisticsBuffer);

    /*
    Method Verify

    method Verify

    */
    inline int Verify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload, int Timeout);

    /*
    Method VerifyMatch

    method VerifyMatch

    */
    inline int VerifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OPOS_EXPORT IOPOSBiometrics_1_10 : public QAxObject
{
public:
    IOPOSBiometrics_1_10(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Algorithm

    property Algorithm

    */
    inline int Algorithm() const; //Returns the value of Algorithm
    inline void SetAlgorithm(int value); //Sets the value of the Algorithm property

    /*
    Property AlgorithmList

    property AlgorithmList

    */
    inline QString AlgorithmList() const; //Returns the value of AlgorithmList

    /*
    Property AutoDisable

    property AutoDisable

    */
    inline bool AutoDisable() const; //Returns the value of AutoDisable
    inline void SetAutoDisable(bool value); //Sets the value of the AutoDisable property

    /*
    Property BIR

    property BIR

    */
    inline QString BIR() const; //Returns the value of BIR

    /*
    Property BinaryConversion

    property BinaryConversion

    */
    inline int BinaryConversion() const; //Returns the value of BinaryConversion
    inline void SetBinaryConversion(int value); //Sets the value of the BinaryConversion property

    /*
    Property CapCompareFirmwareVersion

    property CapCompareFirmwareVersion

    */
    inline bool CapCompareFirmwareVersion() const; //Returns the value of CapCompareFirmwareVersion

    /*
    Property CapPowerReporting

    property CapPowerReporting

    */
    inline int CapPowerReporting() const; //Returns the value of CapPowerReporting

    /*
    Property CapPrematchData

    property CapPrematchData

    */
    inline bool CapPrematchData() const; //Returns the value of CapPrematchData

    /*
    Property CapRawSensorData

    property CapRawSensorData

    */
    inline bool CapRawSensorData() const; //Returns the value of CapRawSensorData

    /*
    Property CapRealTimeData

    property CapRealTimeData

    */
    inline bool CapRealTimeData() const; //Returns the value of CapRealTimeData

    /*
    Property CapSensorColor

    property CapSensorColor

    */
    inline int CapSensorColor() const; //Returns the value of CapSensorColor

    /*
    Property CapSensorOrientation

    property CapSensorOrientation

    */
    inline int CapSensorOrientation() const; //Returns the value of CapSensorOrientation

    /*
    Property CapSensorType

    property CapSensorType

    */
    inline int CapSensorType() const; //Returns the value of CapSensorType

    /*
    Property CapStatisticsReporting

    property CapStatisticsReporting

    */
    inline bool CapStatisticsReporting() const; //Returns the value of CapStatisticsReporting

    /*
    Property CapTemplateAdaptation

    property CapTemplateAdaptation

    */
    inline bool CapTemplateAdaptation() const; //Returns the value of CapTemplateAdaptation

    /*
    Property CapUpdateFirmware

    property CapUpdateFirmware

    */
    inline bool CapUpdateFirmware() const; //Returns the value of CapUpdateFirmware

    /*
    Property CapUpdateStatistics

    property CapUpdateStatistics

    */
    inline bool CapUpdateStatistics() const; //Returns the value of CapUpdateStatistics

    /*
    Property CheckHealthText

    property CheckHealthText

    */
    inline QString CheckHealthText() const; //Returns the value of CheckHealthText

    /*
    Property Claimed

    property Claimed

    */
    inline bool Claimed() const; //Returns the value of Claimed

    /*
    Property ControlObjectDescription

    property ControlObjectDescription

    */
    inline QString ControlObjectDescription() const; //Returns the value of ControlObjectDescription

    /*
    Property ControlObjectVersion

    property ControlObjectVersion

    */
    inline int ControlObjectVersion() const; //Returns the value of ControlObjectVersion

    /*
    Property DataCount

    property DataCount

    */
    inline int DataCount() const; //Returns the value of DataCount

    /*
    Property DataEventEnabled

    property DataEventEnabled

    */
    inline bool DataEventEnabled() const; //Returns the value of DataEventEnabled
    inline void SetDataEventEnabled(bool value); //Sets the value of the DataEventEnabled property

    /*
    Property DeviceDescription

    property DeviceDescription

    */
    inline QString DeviceDescription() const; //Returns the value of DeviceDescription

    /*
    Property DeviceEnabled

    property DeviceEnabled

    */
    inline bool DeviceEnabled() const; //Returns the value of DeviceEnabled
    inline void SetDeviceEnabled(bool value); //Sets the value of the DeviceEnabled property

    /*
    Property DeviceName

    property DeviceName

    */
    inline QString DeviceName() const; //Returns the value of DeviceName

    /*
    Property FreezeEvents

    property FreezeEvents

    */
    inline bool FreezeEvents() const; //Returns the value of FreezeEvents
    inline void SetFreezeEvents(bool value); //Sets the value of the FreezeEvents property

    /*
    Property OpenResult

    property OpenResult

    */
    inline int OpenResult() const; //Returns the value of OpenResult

    /*
    Property PowerNotify

    property PowerNotify

    */
    inline int PowerNotify() const; //Returns the value of PowerNotify
    inline void SetPowerNotify(int value); //Sets the value of the PowerNotify property

    /*
    Property PowerState

    property PowerState

    */
    inline int PowerState() const; //Returns the value of PowerState

    /*
    Property RawSensorData

    property RawSensorData

    */
    inline QString RawSensorData() const; //Returns the value of RawSensorData

    /*
    Property RealTimeDataEnabled

    property RealTimeDataEnabled

    */
    inline bool RealTimeDataEnabled() const; //Returns the value of RealTimeDataEnabled
    inline void SetRealTimeDataEnabled(bool value); //Sets the value of the RealTimeDataEnabled property

    /*
    Property ResultCode

    property ResultCode

    */
    inline int ResultCode() const; //Returns the value of ResultCode

    /*
    Property ResultCodeExtended

    property ResultCodeExtended

    */
    inline int ResultCodeExtended() const; //Returns the value of ResultCodeExtended

    /*
    Property SensorBPP

    property SensorBPP

    */
    inline int SensorBPP() const; //Returns the value of SensorBPP

    /*
    Property SensorColor

    property SensorColor

    */
    inline int SensorColor() const; //Returns the value of SensorColor
    inline void SetSensorColor(int value); //Sets the value of the SensorColor property

    /*
    Property SensorHeight

    property SensorHeight

    */
    inline int SensorHeight() const; //Returns the value of SensorHeight

    /*
    Property SensorOrientation

    property SensorOrientation

    */
    inline int SensorOrientation() const; //Returns the value of SensorOrientation
    inline void SetSensorOrientation(int value); //Sets the value of the SensorOrientation property

    /*
    Property SensorType

    property SensorType

    */
    inline int SensorType() const; //Returns the value of SensorType
    inline void SetSensorType(int value); //Sets the value of the SensorType property

    /*
    Property SensorWidth

    property SensorWidth

    */
    inline int SensorWidth() const; //Returns the value of SensorWidth

    /*
    Property ServiceObjectDescription

    property ServiceObjectDescription

    */
    inline QString ServiceObjectDescription() const; //Returns the value of ServiceObjectDescription

    /*
    Property ServiceObjectVersion

    property ServiceObjectVersion

    */
    inline int ServiceObjectVersion() const; //Returns the value of ServiceObjectVersion

    /*
    Property State

    property State

    */
    inline int State() const; //Returns the value of State

    /*
    Method BeginEnrollCapture

    method BeginEnrollCapture

    */
    inline int BeginEnrollCapture(const QString& ReferenceBIR, const QString& Payload);

    /*
    Method BeginVerifyCapture

    method BeginVerifyCapture

    */
    inline int BeginVerifyCapture();

    /*
    Method CheckHealth

    method CheckHealth

    */
    inline int CheckHealth(int Level);

    /*
    Method ClaimDevice

    method ClaimDevice

    */
    inline int ClaimDevice(int Timeout);

    /*
    Method ClearInput

    method ClearInput

    */
    inline int ClearInput();

    /*
    Method ClearInputProperties

    method ClearInputProperties

    */
    inline int ClearInputProperties();

    /*
    Method Close

    method Close

    */
    inline int Close();

    /*
    Method CompareFirmwareVersion

    method CompareFirmwareVersion

    */
    inline int CompareFirmwareVersion(const QString& FirmwareFileName, int& pResult);

    /*
    Method DirectIO

    method DirectIO

    */
    inline int DirectIO(int Command, int& pData, QString& pString);

    /*
    Method EndCapture

    method EndCapture

    */
    inline int EndCapture();

    /*
    Method Identify

    method Identify

    */
    inline int Identify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking, int Timeout);

    /*
    Method IdentifyMatch

    method IdentifyMatch

    */
    inline int IdentifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking);

    /*
    Method Open

    method Open

    */
    inline int Open(const QString& DeviceName);

    /*
    Method ProcessPrematchData

    method ProcessPrematchData

    */
    inline int ProcessPrematchData(const QString& CapturedBIR, const QString& PrematchDataBIR, QString& pProcessedBIR);

    /*
    Method ReleaseDevice

    method ReleaseDevice

    */
    inline int ReleaseDevice();

    /*
    Method ResetStatistics

    method ResetStatistics

    */
    inline int ResetStatistics(const QString& StatisticsBuffer);

    /*
    Method RetrieveStatistics

    method RetrieveStatistics

    */
    inline int RetrieveStatistics(QString& pStatisticsBuffer);

    /*
    Method SOData

    method SOData

    */
    inline void SOData(int Status);

    /*
    Method SODirectIO

    method SODirectIO

    */
    inline void SODirectIO(int EventNumber, int& pData, QString& pString);

    /*
    Method SOError

    method SOError

    */
    inline void SOError(int ResultCode, int ResultCodeExtended, int ErrorLocus, int& pErrorResponse);

    /*
    Method SOOutputCompleteDummy

    method SOOutputCompleteDummy

    */
    inline void SOOutputCompleteDummy(int OutputID);

    /*
    Method SOProcessID

    method SOProcessID

    */
    inline int SOProcessID();

    /*
    Method SOStatusUpdate

    method SOStatusUpdate

    */
    inline void SOStatusUpdate(int Data);

    /*
    Method UpdateFirmware

    method UpdateFirmware

    */
    inline int UpdateFirmware(const QString& FirmwareFileName);

    /*
    Method UpdateStatistics

    method UpdateStatistics

    */
    inline int UpdateStatistics(const QString& StatisticsBuffer);

    /*
    Method Verify

    method Verify

    */
    inline int Verify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload, int Timeout);

    /*
    Method VerifyMatch

    method VerifyMatch

    */
    inline int VerifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class OPOS_EXPORT OPOSBiometrics : public QAxObject
{
public:
    OPOSBiometrics(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{ccb90262-b81e-11d2-ab74-0040054c3719}");
    }

    OPOSBiometrics(IOPOSBiometrics *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    OPOSBiometrics(IOPOSBiometrics_1_10 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Algorithm

    property Algorithm

    */
    inline int Algorithm() const; //Returns the value of Algorithm
    inline void SetAlgorithm(int value); //Sets the value of the Algorithm property

    /*
    Property AlgorithmList

    property AlgorithmList

    */
    inline QString AlgorithmList() const; //Returns the value of AlgorithmList

    /*
    Property AutoDisable

    property AutoDisable

    */
    inline bool AutoDisable() const; //Returns the value of AutoDisable
    inline void SetAutoDisable(bool value); //Sets the value of the AutoDisable property

    /*
    Property BIR

    property BIR

    */
    inline QString BIR() const; //Returns the value of BIR

    /*
    Property BinaryConversion

    property BinaryConversion

    */
    inline int BinaryConversion() const; //Returns the value of BinaryConversion
    inline void SetBinaryConversion(int value); //Sets the value of the BinaryConversion property

    /*
    Property CapCompareFirmwareVersion

    property CapCompareFirmwareVersion

    */
    inline bool CapCompareFirmwareVersion() const; //Returns the value of CapCompareFirmwareVersion

    /*
    Property CapPowerReporting

    property CapPowerReporting

    */
    inline int CapPowerReporting() const; //Returns the value of CapPowerReporting

    /*
    Property CapPrematchData

    property CapPrematchData

    */
    inline bool CapPrematchData() const; //Returns the value of CapPrematchData

    /*
    Property CapRawSensorData

    property CapRawSensorData

    */
    inline bool CapRawSensorData() const; //Returns the value of CapRawSensorData

    /*
    Property CapRealTimeData

    property CapRealTimeData

    */
    inline bool CapRealTimeData() const; //Returns the value of CapRealTimeData

    /*
    Property CapSensorColor

    property CapSensorColor

    */
    inline int CapSensorColor() const; //Returns the value of CapSensorColor

    /*
    Property CapSensorOrientation

    property CapSensorOrientation

    */
    inline int CapSensorOrientation() const; //Returns the value of CapSensorOrientation

    /*
    Property CapSensorType

    property CapSensorType

    */
    inline int CapSensorType() const; //Returns the value of CapSensorType

    /*
    Property CapStatisticsReporting

    property CapStatisticsReporting

    */
    inline bool CapStatisticsReporting() const; //Returns the value of CapStatisticsReporting

    /*
    Property CapTemplateAdaptation

    property CapTemplateAdaptation

    */
    inline bool CapTemplateAdaptation() const; //Returns the value of CapTemplateAdaptation

    /*
    Property CapUpdateFirmware

    property CapUpdateFirmware

    */
    inline bool CapUpdateFirmware() const; //Returns the value of CapUpdateFirmware

    /*
    Property CapUpdateStatistics

    property CapUpdateStatistics

    */
    inline bool CapUpdateStatistics() const; //Returns the value of CapUpdateStatistics

    /*
    Property CheckHealthText

    property CheckHealthText

    */
    inline QString CheckHealthText() const; //Returns the value of CheckHealthText

    /*
    Property Claimed

    property Claimed

    */
    inline bool Claimed() const; //Returns the value of Claimed

    /*
    Property ControlObjectDescription

    property ControlObjectDescription

    */
    inline QString ControlObjectDescription() const; //Returns the value of ControlObjectDescription

    /*
    Property ControlObjectVersion

    property ControlObjectVersion

    */
    inline int ControlObjectVersion() const; //Returns the value of ControlObjectVersion

    /*
    Property DataCount

    property DataCount

    */
    inline int DataCount() const; //Returns the value of DataCount

    /*
    Property DataEventEnabled

    property DataEventEnabled

    */
    inline bool DataEventEnabled() const; //Returns the value of DataEventEnabled
    inline void SetDataEventEnabled(bool value); //Sets the value of the DataEventEnabled property

    /*
    Property DeviceDescription

    property DeviceDescription

    */
    inline QString DeviceDescription() const; //Returns the value of DeviceDescription

    /*
    Property DeviceEnabled

    property DeviceEnabled

    */
    inline bool DeviceEnabled() const; //Returns the value of DeviceEnabled
    inline void SetDeviceEnabled(bool value); //Sets the value of the DeviceEnabled property

    /*
    Property DeviceName

    property DeviceName

    */
    inline QString DeviceName() const; //Returns the value of DeviceName

    /*
    Property FreezeEvents

    property FreezeEvents

    */
    inline bool FreezeEvents() const; //Returns the value of FreezeEvents
    inline void SetFreezeEvents(bool value); //Sets the value of the FreezeEvents property

    /*
    Property OpenResult

    property OpenResult

    */
    inline int OpenResult() const; //Returns the value of OpenResult

    /*
    Property PowerNotify

    property PowerNotify

    */
    inline int PowerNotify() const; //Returns the value of PowerNotify
    inline void SetPowerNotify(int value); //Sets the value of the PowerNotify property

    /*
    Property PowerState

    property PowerState

    */
    inline int PowerState() const; //Returns the value of PowerState

    /*
    Property RawSensorData

    property RawSensorData

    */
    inline QString RawSensorData() const; //Returns the value of RawSensorData

    /*
    Property RealTimeDataEnabled

    property RealTimeDataEnabled

    */
    inline bool RealTimeDataEnabled() const; //Returns the value of RealTimeDataEnabled
    inline void SetRealTimeDataEnabled(bool value); //Sets the value of the RealTimeDataEnabled property

    /*
    Property ResultCode

    property ResultCode

    */
    inline int ResultCode() const; //Returns the value of ResultCode

    /*
    Property ResultCodeExtended

    property ResultCodeExtended

    */
    inline int ResultCodeExtended() const; //Returns the value of ResultCodeExtended

    /*
    Property SensorBPP

    property SensorBPP

    */
    inline int SensorBPP() const; //Returns the value of SensorBPP

    /*
    Property SensorColor

    property SensorColor

    */
    inline int SensorColor() const; //Returns the value of SensorColor
    inline void SetSensorColor(int value); //Sets the value of the SensorColor property

    /*
    Property SensorHeight

    property SensorHeight

    */
    inline int SensorHeight() const; //Returns the value of SensorHeight

    /*
    Property SensorOrientation

    property SensorOrientation

    */
    inline int SensorOrientation() const; //Returns the value of SensorOrientation
    inline void SetSensorOrientation(int value); //Sets the value of the SensorOrientation property

    /*
    Property SensorType

    property SensorType

    */
    inline int SensorType() const; //Returns the value of SensorType
    inline void SetSensorType(int value); //Sets the value of the SensorType property

    /*
    Property SensorWidth

    property SensorWidth

    */
    inline int SensorWidth() const; //Returns the value of SensorWidth

    /*
    Property ServiceObjectDescription

    property ServiceObjectDescription

    */
    inline QString ServiceObjectDescription() const; //Returns the value of ServiceObjectDescription

    /*
    Property ServiceObjectVersion

    property ServiceObjectVersion

    */
    inline int ServiceObjectVersion() const; //Returns the value of ServiceObjectVersion

    /*
    Property State

    property State

    */
    inline int State() const; //Returns the value of State

    /*
    Method BeginEnrollCapture

    method BeginEnrollCapture

    */
    inline int BeginEnrollCapture(const QString& ReferenceBIR, const QString& Payload);

    /*
    Method BeginVerifyCapture

    method BeginVerifyCapture

    */
    inline int BeginVerifyCapture();

    /*
    Method CheckHealth

    method CheckHealth

    */
    inline int CheckHealth(int Level);

    /*
    Method ClaimDevice

    method ClaimDevice

    */
    inline int ClaimDevice(int Timeout);

    /*
    Method ClearInput

    method ClearInput

    */
    inline int ClearInput();

    /*
    Method ClearInputProperties

    method ClearInputProperties

    */
    inline int ClearInputProperties();

    /*
    Method Close

    method Close

    */
    inline int Close();

    /*
    Method CompareFirmwareVersion

    method CompareFirmwareVersion

    */
    inline int CompareFirmwareVersion(const QString& FirmwareFileName, int& pResult);

    /*
    Method DirectIO

    method DirectIO

    */
    inline int DirectIO(int Command, int& pData, QString& pString);

    /*
    Method EndCapture

    method EndCapture

    */
    inline int EndCapture();

    /*
    Method Identify

    method Identify

    */
    inline int Identify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking, int Timeout);

    /*
    Method IdentifyMatch

    method IdentifyMatch

    */
    inline int IdentifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking);

    /*
    Method Open

    method Open

    */
    inline int Open(const QString& DeviceName);

    /*
    Method ProcessPrematchData

    method ProcessPrematchData

    */
    inline int ProcessPrematchData(const QString& CapturedBIR, const QString& PrematchDataBIR, QString& pProcessedBIR);

    /*
    Method ReleaseDevice

    method ReleaseDevice

    */
    inline int ReleaseDevice();

    /*
    Method ResetStatistics

    method ResetStatistics

    */
    inline int ResetStatistics(const QString& StatisticsBuffer);

    /*
    Method RetrieveStatistics

    method RetrieveStatistics

    */
    inline int RetrieveStatistics(QString& pStatisticsBuffer);

    /*
    Method SOData

    method SOData

    */
    inline void SOData(int Status);

    /*
    Method SODirectIO

    method SODirectIO

    */
    inline void SODirectIO(int EventNumber, int& pData, QString& pString);

    /*
    Method SOError

    method SOError

    */
    inline void SOError(int ResultCode, int ResultCodeExtended, int ErrorLocus, int& pErrorResponse);

    /*
    Method SOOutputCompleteDummy

    method SOOutputCompleteDummy

    */
    inline void SOOutputCompleteDummy(int OutputID);

    /*
    Method SOProcessID

    method SOProcessID

    */
    inline int SOProcessID();

    /*
    Method SOStatusUpdate

    method SOStatusUpdate

    */
    inline void SOStatusUpdate(int Data);

    /*
    Method UpdateFirmware

    method UpdateFirmware

    */
    inline int UpdateFirmware(const QString& FirmwareFileName);

    /*
    Method UpdateStatistics

    method UpdateStatistics

    */
    inline int UpdateStatistics(const QString& StatisticsBuffer);

    /*
    Method Verify

    method Verify

    */
    inline int Verify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload, int Timeout);

    /*
    Method VerifyMatch

    method VerifyMatch

    */
    inline int VerifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_OPOS_NOINLINES
inline int OPOSBiometrics::Algorithm() const
{
    QVariant qax_result = property("Algorithm");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPOSBiometrics::SetAlgorithm(int value){ setProperty("Algorithm", QVariant(value)); }

inline QString OPOSBiometrics::AlgorithmList() const
{
    QVariant qax_result = property("AlgorithmList");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool OPOSBiometrics::AutoDisable() const
{
    QVariant qax_result = property("AutoDisable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPOSBiometrics::SetAutoDisable(bool value){ setProperty("AutoDisable", QVariant(value)); }

inline QString OPOSBiometrics::BIR() const
{
    QVariant qax_result = property("BIR");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int OPOSBiometrics::BinaryConversion() const
{
    QVariant qax_result = property("BinaryConversion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPOSBiometrics::SetBinaryConversion(int value){ setProperty("BinaryConversion", QVariant(value)); }

inline bool OPOSBiometrics::CapCompareFirmwareVersion() const
{
    QVariant qax_result = property("CapCompareFirmwareVersion");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int OPOSBiometrics::CapPowerReporting() const
{
    QVariant qax_result = property("CapPowerReporting");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool OPOSBiometrics::CapPrematchData() const
{
    QVariant qax_result = property("CapPrematchData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool OPOSBiometrics::CapRawSensorData() const
{
    QVariant qax_result = property("CapRawSensorData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool OPOSBiometrics::CapRealTimeData() const
{
    QVariant qax_result = property("CapRealTimeData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int OPOSBiometrics::CapSensorColor() const
{
    QVariant qax_result = property("CapSensorColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::CapSensorOrientation() const
{
    QVariant qax_result = property("CapSensorOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::CapSensorType() const
{
    QVariant qax_result = property("CapSensorType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool OPOSBiometrics::CapStatisticsReporting() const
{
    QVariant qax_result = property("CapStatisticsReporting");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool OPOSBiometrics::CapTemplateAdaptation() const
{
    QVariant qax_result = property("CapTemplateAdaptation");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool OPOSBiometrics::CapUpdateFirmware() const
{
    QVariant qax_result = property("CapUpdateFirmware");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool OPOSBiometrics::CapUpdateStatistics() const
{
    QVariant qax_result = property("CapUpdateStatistics");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString OPOSBiometrics::CheckHealthText() const
{
    QVariant qax_result = property("CheckHealthText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool OPOSBiometrics::Claimed() const
{
    QVariant qax_result = property("Claimed");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString OPOSBiometrics::ControlObjectDescription() const
{
    QVariant qax_result = property("ControlObjectDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int OPOSBiometrics::ControlObjectVersion() const
{
    QVariant qax_result = property("ControlObjectVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::DataCount() const
{
    QVariant qax_result = property("DataCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool OPOSBiometrics::DataEventEnabled() const
{
    QVariant qax_result = property("DataEventEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPOSBiometrics::SetDataEventEnabled(bool value){ setProperty("DataEventEnabled", QVariant(value)); }

inline QString OPOSBiometrics::DeviceDescription() const
{
    QVariant qax_result = property("DeviceDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool OPOSBiometrics::DeviceEnabled() const
{
    QVariant qax_result = property("DeviceEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPOSBiometrics::SetDeviceEnabled(bool value){ setProperty("DeviceEnabled", QVariant(value)); }

inline QString OPOSBiometrics::DeviceName() const
{
    QVariant qax_result = property("DeviceName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool OPOSBiometrics::FreezeEvents() const
{
    QVariant qax_result = property("FreezeEvents");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPOSBiometrics::SetFreezeEvents(bool value){ setProperty("FreezeEvents", QVariant(value)); }

inline int OPOSBiometrics::OpenResult() const
{
    QVariant qax_result = property("OpenResult");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::PowerNotify() const
{
    QVariant qax_result = property("PowerNotify");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPOSBiometrics::SetPowerNotify(int value){ setProperty("PowerNotify", QVariant(value)); }

inline int OPOSBiometrics::PowerState() const
{
    QVariant qax_result = property("PowerState");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString OPOSBiometrics::RawSensorData() const
{
    QVariant qax_result = property("RawSensorData");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool OPOSBiometrics::RealTimeDataEnabled() const
{
    QVariant qax_result = property("RealTimeDataEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OPOSBiometrics::SetRealTimeDataEnabled(bool value){ setProperty("RealTimeDataEnabled", QVariant(value)); }

inline int OPOSBiometrics::ResultCode() const
{
    QVariant qax_result = property("ResultCode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::ResultCodeExtended() const
{
    QVariant qax_result = property("ResultCodeExtended");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::SensorBPP() const
{
    QVariant qax_result = property("SensorBPP");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::SensorColor() const
{
    QVariant qax_result = property("SensorColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPOSBiometrics::SetSensorColor(int value){ setProperty("SensorColor", QVariant(value)); }

inline int OPOSBiometrics::SensorHeight() const
{
    QVariant qax_result = property("SensorHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::SensorOrientation() const
{
    QVariant qax_result = property("SensorOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPOSBiometrics::SetSensorOrientation(int value){ setProperty("SensorOrientation", QVariant(value)); }

inline int OPOSBiometrics::SensorType() const
{
    QVariant qax_result = property("SensorType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void OPOSBiometrics::SetSensorType(int value){ setProperty("SensorType", QVariant(value)); }

inline int OPOSBiometrics::SensorWidth() const
{
    QVariant qax_result = property("SensorWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString OPOSBiometrics::ServiceObjectDescription() const
{
    QVariant qax_result = property("ServiceObjectDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int OPOSBiometrics::ServiceObjectVersion() const
{
    QVariant qax_result = property("ServiceObjectVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int OPOSBiometrics::BeginEnrollCapture(const QString& ReferenceBIR, const QString& Payload)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ReferenceBIR, (void*)&Payload};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int OPOSBiometrics::BeginVerifyCapture()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int OPOSBiometrics::CheckHealth(int Level)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int OPOSBiometrics::ClaimDevice(int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline int OPOSBiometrics::ClearInput()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline int OPOSBiometrics::ClearInputProperties()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline int OPOSBiometrics::Close()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int OPOSBiometrics::CompareFirmwareVersion(const QString& FirmwareFileName, int& pResult)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FirmwareFileName, (void*)&pResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline int OPOSBiometrics::DirectIO(int Command, int& pData, QString& pString)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Command, (void*)&pData, (void*)&pString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline int OPOSBiometrics::EndCapture()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline int OPOSBiometrics::Identify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking, int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&ReferenceBIRPopulation, (void*)&pCandidateRanking, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline int OPOSBiometrics::IdentifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&SampleBIR, (void*)&ReferenceBIRPopulation, (void*)&pCandidateRanking};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int OPOSBiometrics::Open(const QString& DeviceName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&DeviceName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline int OPOSBiometrics::ProcessPrematchData(const QString& CapturedBIR, const QString& PrematchDataBIR, QString& pProcessedBIR)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&CapturedBIR, (void*)&PrematchDataBIR, (void*)&pProcessedBIR};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int OPOSBiometrics::ReleaseDevice()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline int OPOSBiometrics::ResetStatistics(const QString& StatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int OPOSBiometrics::RetrieveStatistics(QString& pStatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pStatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void OPOSBiometrics::SOData(int Status)
{
    void *_a[] = {0, (void*)&Status};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void OPOSBiometrics::SODirectIO(int EventNumber, int& pData, QString& pString)
{
    void *_a[] = {0, (void*)&EventNumber, (void*)&pData, (void*)&pString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void OPOSBiometrics::SOError(int ResultCode, int ResultCodeExtended, int ErrorLocus, int& pErrorResponse)
{
    void *_a[] = {0, (void*)&ResultCode, (void*)&ResultCodeExtended, (void*)&ErrorLocus, (void*)&pErrorResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void OPOSBiometrics::SOOutputCompleteDummy(int OutputID)
{
    void *_a[] = {0, (void*)&OutputID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline int OPOSBiometrics::SOProcessID()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline void OPOSBiometrics::SOStatusUpdate(int Data)
{
    void *_a[] = {0, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline int OPOSBiometrics::UpdateFirmware(const QString& FirmwareFileName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FirmwareFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline int OPOSBiometrics::UpdateStatistics(const QString& StatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline int OPOSBiometrics::Verify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload, int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&ReferenceBIR, (void*)&pAdaptedBIR, (void*)&pResult, (void*)&pFARAchieved, (void*)&pFRRAchieved, (void*)&pPayload, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline int OPOSBiometrics::VerifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&SampleBIR, (void*)&ReferenceBIR, (void*)&pAdaptedBIR, (void*)&pResult, (void*)&pFARAchieved, (void*)&pFRRAchieved, (void*)&pPayload};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}


inline int IOPOSBiometrics::Algorithm() const
{
    QVariant qax_result = property("Algorithm");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics::SetAlgorithm(int value){ setProperty("Algorithm", QVariant(value)); }

inline QString IOPOSBiometrics::AlgorithmList() const
{
    QVariant qax_result = property("AlgorithmList");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics::AutoDisable() const
{
    QVariant qax_result = property("AutoDisable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics::SetAutoDisable(bool value){ setProperty("AutoDisable", QVariant(value)); }

inline QString IOPOSBiometrics::BIR() const
{
    QVariant qax_result = property("BIR");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IOPOSBiometrics::BinaryConversion() const
{
    QVariant qax_result = property("BinaryConversion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics::SetBinaryConversion(int value){ setProperty("BinaryConversion", QVariant(value)); }

inline bool IOPOSBiometrics::CapCompareFirmwareVersion() const
{
    QVariant qax_result = property("CapCompareFirmwareVersion");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IOPOSBiometrics::CapPowerReporting() const
{
    QVariant qax_result = property("CapPowerReporting");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IOPOSBiometrics::CapPrematchData() const
{
    QVariant qax_result = property("CapPrematchData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics::CapRawSensorData() const
{
    QVariant qax_result = property("CapRawSensorData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics::CapRealTimeData() const
{
    QVariant qax_result = property("CapRealTimeData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IOPOSBiometrics::CapSensorColor() const
{
    QVariant qax_result = property("CapSensorColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::CapSensorOrientation() const
{
    QVariant qax_result = property("CapSensorOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::CapSensorType() const
{
    QVariant qax_result = property("CapSensorType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IOPOSBiometrics::CapStatisticsReporting() const
{
    QVariant qax_result = property("CapStatisticsReporting");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics::CapTemplateAdaptation() const
{
    QVariant qax_result = property("CapTemplateAdaptation");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics::CapUpdateFirmware() const
{
    QVariant qax_result = property("CapUpdateFirmware");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics::CapUpdateStatistics() const
{
    QVariant qax_result = property("CapUpdateStatistics");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IOPOSBiometrics::CheckHealthText() const
{
    QVariant qax_result = property("CheckHealthText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics::Claimed() const
{
    QVariant qax_result = property("Claimed");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IOPOSBiometrics::ControlObjectDescription() const
{
    QVariant qax_result = property("ControlObjectDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IOPOSBiometrics::ControlObjectVersion() const
{
    QVariant qax_result = property("ControlObjectVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::DataCount() const
{
    QVariant qax_result = property("DataCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IOPOSBiometrics::DataEventEnabled() const
{
    QVariant qax_result = property("DataEventEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics::SetDataEventEnabled(bool value){ setProperty("DataEventEnabled", QVariant(value)); }

inline QString IOPOSBiometrics::DeviceDescription() const
{
    QVariant qax_result = property("DeviceDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics::DeviceEnabled() const
{
    QVariant qax_result = property("DeviceEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics::SetDeviceEnabled(bool value){ setProperty("DeviceEnabled", QVariant(value)); }

inline QString IOPOSBiometrics::DeviceName() const
{
    QVariant qax_result = property("DeviceName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics::FreezeEvents() const
{
    QVariant qax_result = property("FreezeEvents");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics::SetFreezeEvents(bool value){ setProperty("FreezeEvents", QVariant(value)); }

inline int IOPOSBiometrics::OpenResult() const
{
    QVariant qax_result = property("OpenResult");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::PowerNotify() const
{
    QVariant qax_result = property("PowerNotify");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics::SetPowerNotify(int value){ setProperty("PowerNotify", QVariant(value)); }

inline int IOPOSBiometrics::PowerState() const
{
    QVariant qax_result = property("PowerState");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IOPOSBiometrics::RawSensorData() const
{
    QVariant qax_result = property("RawSensorData");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics::RealTimeDataEnabled() const
{
    QVariant qax_result = property("RealTimeDataEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics::SetRealTimeDataEnabled(bool value){ setProperty("RealTimeDataEnabled", QVariant(value)); }

inline int IOPOSBiometrics::ResultCode() const
{
    QVariant qax_result = property("ResultCode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::ResultCodeExtended() const
{
    QVariant qax_result = property("ResultCodeExtended");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::SensorBPP() const
{
    QVariant qax_result = property("SensorBPP");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::SensorColor() const
{
    QVariant qax_result = property("SensorColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics::SetSensorColor(int value){ setProperty("SensorColor", QVariant(value)); }

inline int IOPOSBiometrics::SensorHeight() const
{
    QVariant qax_result = property("SensorHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::SensorOrientation() const
{
    QVariant qax_result = property("SensorOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics::SetSensorOrientation(int value){ setProperty("SensorOrientation", QVariant(value)); }

inline int IOPOSBiometrics::SensorType() const
{
    QVariant qax_result = property("SensorType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics::SetSensorType(int value){ setProperty("SensorType", QVariant(value)); }

inline int IOPOSBiometrics::SensorWidth() const
{
    QVariant qax_result = property("SensorWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IOPOSBiometrics::ServiceObjectDescription() const
{
    QVariant qax_result = property("ServiceObjectDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IOPOSBiometrics::ServiceObjectVersion() const
{
    QVariant qax_result = property("ServiceObjectVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics::BeginEnrollCapture(const QString& ReferenceBIR, const QString& Payload)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ReferenceBIR, (void*)&Payload};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline int IOPOSBiometrics::BeginVerifyCapture()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IOPOSBiometrics::CheckHealth(int Level)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IOPOSBiometrics::ClaimDevice(int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int IOPOSBiometrics::ClearInput()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int IOPOSBiometrics::ClearInputProperties()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int IOPOSBiometrics::Close()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int IOPOSBiometrics::CompareFirmwareVersion(const QString& FirmwareFileName, int& pResult)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FirmwareFileName, (void*)&pResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline int IOPOSBiometrics::DirectIO(int Command, int& pData, QString& pString)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Command, (void*)&pData, (void*)&pString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline int IOPOSBiometrics::EndCapture()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline int IOPOSBiometrics::Identify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking, int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&ReferenceBIRPopulation, (void*)&pCandidateRanking, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IOPOSBiometrics::IdentifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&SampleBIR, (void*)&ReferenceBIRPopulation, (void*)&pCandidateRanking};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline int IOPOSBiometrics::Open(const QString& DeviceName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&DeviceName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline int IOPOSBiometrics::ProcessPrematchData(const QString& CapturedBIR, const QString& PrematchDataBIR, QString& pProcessedBIR)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&CapturedBIR, (void*)&PrematchDataBIR, (void*)&pProcessedBIR};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline int IOPOSBiometrics::ReleaseDevice()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline int IOPOSBiometrics::ResetStatistics(const QString& StatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IOPOSBiometrics::RetrieveStatistics(QString& pStatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pStatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void IOPOSBiometrics::SOData(int Status)
{
    void *_a[] = {0, (void*)&Status};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IOPOSBiometrics::SODirectIO(int EventNumber, int& pData, QString& pString)
{
    void *_a[] = {0, (void*)&EventNumber, (void*)&pData, (void*)&pString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IOPOSBiometrics::SOError(int ResultCode, int ResultCodeExtended, int ErrorLocus, int& pErrorResponse)
{
    void *_a[] = {0, (void*)&ResultCode, (void*)&ResultCodeExtended, (void*)&ErrorLocus, (void*)&pErrorResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IOPOSBiometrics::SOOutputCompleteDummy(int OutputID)
{
    void *_a[] = {0, (void*)&OutputID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline int IOPOSBiometrics::SOProcessID()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void IOPOSBiometrics::SOStatusUpdate(int Data)
{
    void *_a[] = {0, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline int IOPOSBiometrics::UpdateFirmware(const QString& FirmwareFileName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FirmwareFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline int IOPOSBiometrics::UpdateStatistics(const QString& StatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline int IOPOSBiometrics::Verify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload, int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&ReferenceBIR, (void*)&pAdaptedBIR, (void*)&pResult, (void*)&pFARAchieved, (void*)&pFRRAchieved, (void*)&pPayload, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline int IOPOSBiometrics::VerifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&SampleBIR, (void*)&ReferenceBIR, (void*)&pAdaptedBIR, (void*)&pResult, (void*)&pFARAchieved, (void*)&pFRRAchieved, (void*)&pPayload};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}


inline int IOPOSBiometrics_1_10::Algorithm() const
{
    QVariant qax_result = property("Algorithm");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetAlgorithm(int value){ setProperty("Algorithm", QVariant(value)); }

inline QString IOPOSBiometrics_1_10::AlgorithmList() const
{
    QVariant qax_result = property("AlgorithmList");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::AutoDisable() const
{
    QVariant qax_result = property("AutoDisable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetAutoDisable(bool value){ setProperty("AutoDisable", QVariant(value)); }

inline QString IOPOSBiometrics_1_10::BIR() const
{
    QVariant qax_result = property("BIR");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::BinaryConversion() const
{
    QVariant qax_result = property("BinaryConversion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetBinaryConversion(int value){ setProperty("BinaryConversion", QVariant(value)); }

inline bool IOPOSBiometrics_1_10::CapCompareFirmwareVersion() const
{
    QVariant qax_result = property("CapCompareFirmwareVersion");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::CapPowerReporting() const
{
    QVariant qax_result = property("CapPowerReporting");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::CapPrematchData() const
{
    QVariant qax_result = property("CapPrematchData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::CapRawSensorData() const
{
    QVariant qax_result = property("CapRawSensorData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::CapRealTimeData() const
{
    QVariant qax_result = property("CapRealTimeData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::CapSensorColor() const
{
    QVariant qax_result = property("CapSensorColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::CapSensorOrientation() const
{
    QVariant qax_result = property("CapSensorOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::CapSensorType() const
{
    QVariant qax_result = property("CapSensorType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::CapStatisticsReporting() const
{
    QVariant qax_result = property("CapStatisticsReporting");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::CapTemplateAdaptation() const
{
    QVariant qax_result = property("CapTemplateAdaptation");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::CapUpdateFirmware() const
{
    QVariant qax_result = property("CapUpdateFirmware");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::CapUpdateStatistics() const
{
    QVariant qax_result = property("CapUpdateStatistics");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IOPOSBiometrics_1_10::CheckHealthText() const
{
    QVariant qax_result = property("CheckHealthText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::Claimed() const
{
    QVariant qax_result = property("Claimed");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IOPOSBiometrics_1_10::ControlObjectDescription() const
{
    QVariant qax_result = property("ControlObjectDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::ControlObjectVersion() const
{
    QVariant qax_result = property("ControlObjectVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::DataCount() const
{
    QVariant qax_result = property("DataCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::DataEventEnabled() const
{
    QVariant qax_result = property("DataEventEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetDataEventEnabled(bool value){ setProperty("DataEventEnabled", QVariant(value)); }

inline QString IOPOSBiometrics_1_10::DeviceDescription() const
{
    QVariant qax_result = property("DeviceDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::DeviceEnabled() const
{
    QVariant qax_result = property("DeviceEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetDeviceEnabled(bool value){ setProperty("DeviceEnabled", QVariant(value)); }

inline QString IOPOSBiometrics_1_10::DeviceName() const
{
    QVariant qax_result = property("DeviceName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::FreezeEvents() const
{
    QVariant qax_result = property("FreezeEvents");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetFreezeEvents(bool value){ setProperty("FreezeEvents", QVariant(value)); }

inline int IOPOSBiometrics_1_10::OpenResult() const
{
    QVariant qax_result = property("OpenResult");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::PowerNotify() const
{
    QVariant qax_result = property("PowerNotify");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetPowerNotify(int value){ setProperty("PowerNotify", QVariant(value)); }

inline int IOPOSBiometrics_1_10::PowerState() const
{
    QVariant qax_result = property("PowerState");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IOPOSBiometrics_1_10::RawSensorData() const
{
    QVariant qax_result = property("RawSensorData");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IOPOSBiometrics_1_10::RealTimeDataEnabled() const
{
    QVariant qax_result = property("RealTimeDataEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetRealTimeDataEnabled(bool value){ setProperty("RealTimeDataEnabled", QVariant(value)); }

inline int IOPOSBiometrics_1_10::ResultCode() const
{
    QVariant qax_result = property("ResultCode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::ResultCodeExtended() const
{
    QVariant qax_result = property("ResultCodeExtended");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::SensorBPP() const
{
    QVariant qax_result = property("SensorBPP");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::SensorColor() const
{
    QVariant qax_result = property("SensorColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetSensorColor(int value){ setProperty("SensorColor", QVariant(value)); }

inline int IOPOSBiometrics_1_10::SensorHeight() const
{
    QVariant qax_result = property("SensorHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::SensorOrientation() const
{
    QVariant qax_result = property("SensorOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetSensorOrientation(int value){ setProperty("SensorOrientation", QVariant(value)); }

inline int IOPOSBiometrics_1_10::SensorType() const
{
    QVariant qax_result = property("SensorType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IOPOSBiometrics_1_10::SetSensorType(int value){ setProperty("SensorType", QVariant(value)); }

inline int IOPOSBiometrics_1_10::SensorWidth() const
{
    QVariant qax_result = property("SensorWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IOPOSBiometrics_1_10::ServiceObjectDescription() const
{
    QVariant qax_result = property("ServiceObjectDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::ServiceObjectVersion() const
{
    QVariant qax_result = property("ServiceObjectVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IOPOSBiometrics_1_10::BeginEnrollCapture(const QString& ReferenceBIR, const QString& Payload)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ReferenceBIR, (void*)&Payload};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::BeginVerifyCapture()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::CheckHealth(int Level)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::ClaimDevice(int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::ClearInput()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::ClearInputProperties()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::Close()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::CompareFirmwareVersion(const QString& FirmwareFileName, int& pResult)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FirmwareFileName, (void*)&pResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::DirectIO(int Command, int& pData, QString& pString)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Command, (void*)&pData, (void*)&pString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::EndCapture()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::Identify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking, int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&ReferenceBIRPopulation, (void*)&pCandidateRanking, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::IdentifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QVariant& ReferenceBIRPopulation, QVariant& pCandidateRanking)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&SampleBIR, (void*)&ReferenceBIRPopulation, (void*)&pCandidateRanking};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::Open(const QString& DeviceName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&DeviceName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::ProcessPrematchData(const QString& CapturedBIR, const QString& PrematchDataBIR, QString& pProcessedBIR)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&CapturedBIR, (void*)&PrematchDataBIR, (void*)&pProcessedBIR};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::ReleaseDevice()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::ResetStatistics(const QString& StatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::RetrieveStatistics(QString& pStatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pStatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void IOPOSBiometrics_1_10::SOData(int Status)
{
    void *_a[] = {0, (void*)&Status};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IOPOSBiometrics_1_10::SODirectIO(int EventNumber, int& pData, QString& pString)
{
    void *_a[] = {0, (void*)&EventNumber, (void*)&pData, (void*)&pString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IOPOSBiometrics_1_10::SOError(int ResultCode, int ResultCodeExtended, int ErrorLocus, int& pErrorResponse)
{
    void *_a[] = {0, (void*)&ResultCode, (void*)&ResultCodeExtended, (void*)&ErrorLocus, (void*)&pErrorResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IOPOSBiometrics_1_10::SOOutputCompleteDummy(int OutputID)
{
    void *_a[] = {0, (void*)&OutputID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline int IOPOSBiometrics_1_10::SOProcessID()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void IOPOSBiometrics_1_10::SOStatusUpdate(int Data)
{
    void *_a[] = {0, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline int IOPOSBiometrics_1_10::UpdateFirmware(const QString& FirmwareFileName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FirmwareFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::UpdateStatistics(const QString& StatisticsBuffer)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StatisticsBuffer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::Verify(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload, int Timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&ReferenceBIR, (void*)&pAdaptedBIR, (void*)&pResult, (void*)&pFARAchieved, (void*)&pFRRAchieved, (void*)&pPayload, (void*)&Timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline int IOPOSBiometrics_1_10::VerifyMatch(int MaxFARRequested, int MaxFRRRequested, bool FARPrecedence, const QString& SampleBIR, const QString& ReferenceBIR, QString& pAdaptedBIR, bool& pResult, int& pFARAchieved, int& pFRRAchieved, QString& pPayload)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MaxFARRequested, (void*)&MaxFRRRequested, (void*)&FARPrecedence, (void*)&SampleBIR, (void*)&ReferenceBIR, (void*)&pAdaptedBIR, (void*)&pResult, (void*)&pFARAchieved, (void*)&pFRRAchieved, (void*)&pPayload};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}



#endif

}

template<>
inline void *qMetaTypeConstructHelper(const OPOS::OPOSBiometrics *t)
{ Q_ASSERT(!t); return new OPOS::OPOSBiometrics; }

template<>
inline void *qMetaTypeConstructHelper(const OPOS::IOPOSBiometrics *t)
{ Q_ASSERT(!t); return new OPOS::IOPOSBiometrics; }

template<>
inline void *qMetaTypeConstructHelper(const OPOS::IOPOSBiometrics_1_10 *t)
{ Q_ASSERT(!t); return new OPOS::IOPOSBiometrics_1_10; }

#endif

