/****************************************************************************
**
** Metadata for OPOS generated by dumpcpp from type library
** OPOS\CommonCO\OPOSBiometrics.ocx
**
****************************************************************************/

#define QAX_DUMPCPP_OPOS_NOINLINES
#include "OPOS\QtWrappers\Biometrics.h"

using namespace OPOS;

static const uint qt_meta_data_OPOS__OPOSBiometrics[] = {

 // content:
       1,       // revision
       0,       // classname
       3,    10, // classinfo
       45,    16, // methods
       43,    241, // properties
       0,    0, // enums/sets

 // classinfo: key, value
       21, 39, 
       62, 74, 
       90, 102, 

 // signals: signature, parameters, type, tag, flags
       123, 138, 145, 146, 5,
       147, 180, 206, 207, 5,
       208, 237, 293, 294, 5,
       295, 318, 323, 324, 5,
       325, 364, 386, 387, 5,
       388, 413, 418, 419, 5,
       420, 446, 461, 462, 5,

 // slots: signature, parameters, type, tag, flags
       463, 499, 520, 524, 9,
       525, 546, 547, 551, 9,
       552, 569, 575, 579, 9,
       580, 597, 605, 609, 9,
       610, 623, 624, 628, 9,
       629, 652, 653, 657, 9,
       658, 666, 667, 671, 9,
       672, 709, 734, 738, 9,
       739, 767, 789, 793, 9,
       794, 807, 808, 812, 9,
       813, 859, 954, 958, 9,
       959, 1014, 1111, 1115, 9,
       1116, 1130, 1141, 1145, 9,
       1146, 1192, 1234, 1238, 9,
       1239, 1255, 1256, 1260, 9,
       1261, 1286, 1303, 1307, 9,
       1308, 1337, 1355, 1359, 9,
       1360, 1372, 1379, 1380, 9,
       1381, 1411, 1437, 1438, 9,
       1439, 1465, 1521, 1522, 9,
       1523, 1550, 1559, 1560, 9,
       1561, 1575, 1576, 1580, 9,
       1581, 1601, 1606, 1607, 9,
       1608, 1626, 1636, 1637, 9,
       1638, 1659, 1671, 1672, 9,
       1673, 1698, 1715, 1716, 9,
       1717, 1743, 1760, 1761, 9,
       1762, 1785, 1799, 1800, 9,
       1801, 1823, 1836, 1837, 9,
       1838, 1858, 1870, 1871, 9,
       1872, 1901, 1921, 1922, 9,
       1923, 1943, 1955, 1956, 9,
       1957, 1983, 2001, 2002, 9,
       2003, 2022, 2033, 2034, 9,
       2035, 2059, 2076, 2080, 9,
       2081, 2107, 2124, 2128, 9,
       2129, 2196, 2318, 2322, 9,
       2323, 2399, 2523, 2527, 9,

 // properties: name, type, flags
       2528, 2538, 0x02015003, 		 // int Algorithm
       2542, 2556, 0x0a005001, 		 // QString AlgorithmList
       2564, 2576, 0x01015003, 		 // bool AutoDisable
       2581, 2585, 0x0a005001, 		 // QString BIR
       2593, 2610, 0x02015003, 		 // int BinaryConversion
       2614, 2640, 0x01005001, 		 // bool CapCompareFirmwareVersion
       2645, 2663, 0x02005001, 		 // int CapPowerReporting
       2667, 2683, 0x01005001, 		 // bool CapPrematchData
       2688, 2705, 0x01005001, 		 // bool CapRawSensorData
       2710, 2726, 0x01005001, 		 // bool CapRealTimeData
       2731, 2746, 0x02005001, 		 // int CapSensorColor
       2750, 2771, 0x02005001, 		 // int CapSensorOrientation
       2775, 2789, 0x02005001, 		 // int CapSensorType
       2793, 2816, 0x01005001, 		 // bool CapStatisticsReporting
       2821, 2843, 0x01005001, 		 // bool CapTemplateAdaptation
       2848, 2866, 0x01005001, 		 // bool CapUpdateFirmware
       2871, 2891, 0x01005001, 		 // bool CapUpdateStatistics
       2896, 2912, 0x0a005001, 		 // QString CheckHealthText
       2920, 2928, 0x01005001, 		 // bool Claimed
       2933, 2958, 0x0a005001, 		 // QString ControlObjectDescription
       2966, 2987, 0x02005001, 		 // int ControlObjectVersion
       2991, 3001, 0x02005001, 		 // int DataCount
       3005, 3022, 0x01015003, 		 // bool DataEventEnabled
       3027, 3045, 0x0a005001, 		 // QString DeviceDescription
       3053, 3067, 0x01015003, 		 // bool DeviceEnabled
       3072, 3083, 0x0a005001, 		 // QString DeviceName
       3091, 3104, 0x01015003, 		 // bool FreezeEvents
       3109, 3120, 0x02005001, 		 // int OpenResult
       3124, 3136, 0x02015003, 		 // int PowerNotify
       3140, 3151, 0x02005001, 		 // int PowerState
       3155, 3169, 0x0a005001, 		 // QString RawSensorData
       3177, 3197, 0x01015003, 		 // bool RealTimeDataEnabled
       3202, 3213, 0x02005001, 		 // int ResultCode
       3217, 3236, 0x02005001, 		 // int ResultCodeExtended
       3240, 3250, 0x02005001, 		 // int SensorBPP
       3254, 3266, 0x02015003, 		 // int SensorColor
       3270, 3283, 0x02005001, 		 // int SensorHeight
       3287, 3305, 0x02015003, 		 // int SensorOrientation
       3309, 3320, 0x02015003, 		 // int SensorType
       3324, 3336, 0x02005001, 		 // int SensorWidth
       3340, 3365, 0x0a005001, 		 // QString ServiceObjectDescription
       3373, 3394, 0x02005001, 		 // int ServiceObjectVersion
       3398, 3404, 0x02005001, 		 // int State

        0        // eod
};

static const char *qt_meta_stringdata_OPOS__OPOSBiometrics() {
    static const char stringdata0[] = {
    "OPOS::OPOSBiometrics\0"
    "Event Interface 2\0_IOPOSBiometricsEvents\0Interface 0\0IOPOSBiometrics\0Interface 1\0IOPOSBiometrics_1_10\0"
    "DataEvent(int)\0Status\0\0\0DirectIOEvent(int,int&,QString&)\0EventNumber,pData,pString\0\0\0ErrorEvent(int,int,int,int&)\0"
    "ResultCode,ResultCodeExtended,ErrorLocus,pErrorResponse\0\0\0StatusUpdateEvent(int)\0Data\0\0\0exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0"
    "name,argc,argv\0\0\0"
    "BeginEnrollCapture(QString,QString)\0ReferenceBIR,Payload\0int\0\0BeginVerifyCapture()\0\0int\0\0CheckHealth(int)\0Level\0int\0\0ClaimDevice(int)\0Timeout\0int\0\0ClearInput()\0\0int\0\0ClearInputProperties()\0"
    "\0int\0\0Close()\0\0int\0\0CompareFirmwareVersion(QString,int&)\0FirmwareFileName,pResult\0int\0\0DirectIO(int,int&,QString&)\0Command,pData,pString\0int\0\0EndCapture()\0\0int\0\0Identify(int,int,bool,QVariant,QVariant&,int)\0"
    "MaxFARRequested,MaxFRRRequested,FARPrecedence,ReferenceBIRPopulation,pCandidateRanking,Timeout\0int\0\0IdentifyMatch(int,int,bool,QString,QVariant,QVariant&)\0MaxFARRequested,MaxFRRRequested,FARPrecedence,SampleBIR,ReferenceBIRPopulation,pCandidateRanking\0"
    "int\0\0Open(QString)\0DeviceName\0int\0\0ProcessPrematchData(QString,QString,QString&)\0CapturedBIR,PrematchDataBIR,pProcessedBIR\0int\0\0ReleaseDevice()\0\0int\0\0ResetStatistics(QString)\0StatisticsBuffer\0int\0\0RetrieveStatistics(QString&)\0"
    "pStatisticsBuffer\0int\0\0SOData(int)\0Status\0\0\0SODirectIO(int,int&,QString&)\0EventNumber,pData,pString\0\0\0SOError(int,int,int,int&)\0ResultCode,ResultCodeExtended,ErrorLocus,pErrorResponse\0\0\0SOOutputCompleteDummy(int)\0"
    "OutputID\0\0\0SOProcessID()\0\0int\0\0SOStatusUpdate(int)\0Data\0\0\0SetAlgorithm(int)\0Algorithm\0\0\0SetAutoDisable(bool)\0AutoDisable\0\0\0SetBinaryConversion(int)\0BinaryConversion\0\0\0SetDataEventEnabled(bool)\0DataEventEnabled\0"
    "\0\0SetDeviceEnabled(bool)\0DeviceEnabled\0\0\0SetFreezeEvents(bool)\0FreezeEvents\0\0\0SetPowerNotify(int)\0PowerNotify\0\0\0SetRealTimeDataEnabled(bool)\0RealTimeDataEnabled\0\0\0SetSensorColor(int)\0SensorColor\0\0\0SetSensorOrientation(int)\0"
    "SensorOrientation\0\0\0SetSensorType(int)\0SensorType\0\0\0UpdateFirmware(QString)\0FirmwareFileName\0int\0\0UpdateStatistics(QString)\0StatisticsBuffer\0int\0\0Verify(int,int,bool,QString,QString&,bool&,int&,int&,QString&,int)\0"
    "MaxFARRequested,MaxFRRRequested,FARPrecedence,ReferenceBIR,pAdaptedBIR,pResult,pFARAchieved,pFRRAchieved,pPayload,Timeout\0int\0\0VerifyMatch(int,int,bool,QString,QString,QString&,bool&,int&,int&,QString&)\0"
    "MaxFARRequested,MaxFRRRequested,FARPrecedence,SampleBIR,ReferenceBIR,pAdaptedBIR,pResult,pFARAchieved,pFRRAchieved,pPayload\0int\0\0"
    "Algorithm\0int\0AlgorithmList\0QString\0AutoDisable\0bool\0BIR\0QString\0BinaryConversion\0"
    "int\0CapCompareFirmwareVersion\0bool\0CapPowerReporting\0int\0CapPrematchData\0bool\0CapRawSensorData\0bool\0CapRealTimeData\0bool\0CapSensorColor\0int\0CapSensorOrientation\0int\0CapSensorType\0int\0CapStatisticsReporting\0"
    "bool\0CapTemplateAdaptation\0bool\0CapUpdateFirmware\0bool\0CapUpdateStatistics\0bool\0CheckHealthText\0QString\0Claimed\0bool\0ControlObjectDescription\0QString\0ControlObjectVersion\0int\0DataCount\0int\0DataEventEnabled\0"
    "bool\0DeviceDescription\0QString\0DeviceEnabled\0bool\0DeviceName\0QString\0FreezeEvents\0bool\0OpenResult\0int\0PowerNotify\0int\0PowerState\0int\0RawSensorData\0QString\0RealTimeDataEnabled\0bool\0ResultCode\0int\0ResultCodeExtended\0"
    "int\0SensorBPP\0int\0SensorColor\0int\0SensorHeight\0int\0SensorOrientation\0int\0SensorType\0int\0SensorWidth\0int\0ServiceObjectDescription\0QString\0ServiceObjectVersion\0int\0State\0int\0"
    };
    static char data[sizeof(stringdata0) + 0];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
    }

    return data;
};

const QMetaObject OPOSBiometrics::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPOS__OPOSBiometrics(),
qt_meta_data_OPOS__OPOSBiometrics }
};

void *OPOSBiometrics::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPOS__OPOSBiometrics()))
        return static_cast<void*>(const_cast<OPOSBiometrics*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPOS__IOPOSBiometrics[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       41,    10, // methods
       44,    215, // properties
       0,    0, // enums/sets

 // signals: signature, parameters, type, tag, flags
       22, 61, 83, 84, 5,
       85, 110, 115, 116, 5,
       117, 143, 158, 159, 5,

 // slots: signature, parameters, type, tag, flags
       160, 196, 217, 221, 9,
       222, 243, 244, 248, 9,
       249, 266, 272, 276, 9,
       277, 294, 302, 306, 9,
       307, 320, 321, 325, 9,
       326, 349, 350, 354, 9,
       355, 363, 364, 368, 9,
       369, 406, 431, 435, 9,
       436, 464, 486, 490, 9,
       491, 504, 505, 509, 9,
       510, 556, 651, 655, 9,
       656, 711, 808, 812, 9,
       813, 827, 838, 842, 9,
       843, 889, 931, 935, 9,
       936, 952, 953, 957, 9,
       958, 983, 1000, 1004, 9,
       1005, 1034, 1052, 1056, 9,
       1057, 1069, 1076, 1077, 9,
       1078, 1108, 1134, 1135, 9,
       1136, 1162, 1218, 1219, 9,
       1220, 1247, 1256, 1257, 9,
       1258, 1272, 1273, 1277, 9,
       1278, 1298, 1303, 1304, 9,
       1305, 1323, 1333, 1334, 9,
       1335, 1356, 1368, 1369, 9,
       1370, 1395, 1412, 1413, 9,
       1414, 1440, 1457, 1458, 9,
       1459, 1482, 1496, 1497, 9,
       1498, 1520, 1533, 1534, 9,
       1535, 1555, 1567, 1568, 9,
       1569, 1598, 1618, 1619, 9,
       1620, 1640, 1652, 1653, 9,
       1654, 1680, 1698, 1699, 9,
       1700, 1719, 1730, 1731, 9,
       1732, 1756, 1773, 1777, 9,
       1778, 1804, 1821, 1825, 9,
       1826, 1893, 2015, 2019, 9,
       2020, 2096, 2220, 2224, 9,

 // properties: name, type, flags
       2225, 2235, 0x02015003, 		 // int Algorithm
       2239, 2253, 0x0a005001, 		 // QString AlgorithmList
       2261, 2273, 0x01015003, 		 // bool AutoDisable
       2278, 2282, 0x0a005001, 		 // QString BIR
       2290, 2307, 0x02015003, 		 // int BinaryConversion
       2311, 2337, 0x01005001, 		 // bool CapCompareFirmwareVersion
       2342, 2360, 0x02005001, 		 // int CapPowerReporting
       2364, 2380, 0x01005001, 		 // bool CapPrematchData
       2385, 2402, 0x01005001, 		 // bool CapRawSensorData
       2407, 2423, 0x01005001, 		 // bool CapRealTimeData
       2428, 2443, 0x02005001, 		 // int CapSensorColor
       2447, 2468, 0x02005001, 		 // int CapSensorOrientation
       2472, 2486, 0x02005001, 		 // int CapSensorType
       2490, 2513, 0x01005001, 		 // bool CapStatisticsReporting
       2518, 2540, 0x01005001, 		 // bool CapTemplateAdaptation
       2545, 2563, 0x01005001, 		 // bool CapUpdateFirmware
       2568, 2588, 0x01005001, 		 // bool CapUpdateStatistics
       2593, 2609, 0x0a005001, 		 // QString CheckHealthText
       2617, 2625, 0x01005001, 		 // bool Claimed
       2630, 2655, 0x0a005001, 		 // QString ControlObjectDescription
       2663, 2684, 0x02005001, 		 // int ControlObjectVersion
       2688, 2698, 0x02005001, 		 // int DataCount
       2702, 2719, 0x01015003, 		 // bool DataEventEnabled
       2724, 2742, 0x0a005001, 		 // QString DeviceDescription
       2750, 2764, 0x01015003, 		 // bool DeviceEnabled
       2769, 2780, 0x0a005001, 		 // QString DeviceName
       2788, 2801, 0x01015003, 		 // bool FreezeEvents
       2806, 2817, 0x02005001, 		 // int OpenResult
       2821, 2833, 0x02015003, 		 // int PowerNotify
       2837, 2848, 0x02005001, 		 // int PowerState
       2852, 2866, 0x0a005001, 		 // QString RawSensorData
       2874, 2894, 0x01015003, 		 // bool RealTimeDataEnabled
       2899, 2910, 0x02005001, 		 // int ResultCode
       2914, 2933, 0x02005001, 		 // int ResultCodeExtended
       2937, 2947, 0x02005001, 		 // int SensorBPP
       2951, 2963, 0x02015003, 		 // int SensorColor
       2967, 2980, 0x02005001, 		 // int SensorHeight
       2984, 3002, 0x02015003, 		 // int SensorOrientation
       3006, 3017, 0x02015003, 		 // int SensorType
       3021, 3033, 0x02005001, 		 // int SensorWidth
       3037, 3062, 0x0a005001, 		 // QString ServiceObjectDescription
       3070, 3091, 0x02005001, 		 // int ServiceObjectVersion
       3095, 3101, 0x02005001, 		 // int State
       3105, 3113, 0x0a055003, 		 // QString control

        0        // eod
};

static const char *qt_meta_stringdata_OPOS__IOPOSBiometrics() {
    static const char stringdata0[] = {
    "OPOS::IOPOSBiometrics\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "BeginEnrollCapture(QString,QString)\0ReferenceBIR,Payload\0int\0\0BeginVerifyCapture()\0"
    "\0int\0\0CheckHealth(int)\0Level\0int\0\0ClaimDevice(int)\0Timeout\0int\0\0ClearInput()\0\0int\0\0ClearInputProperties()\0\0int\0\0Close()\0\0int\0\0CompareFirmwareVersion(QString,int&)\0FirmwareFileName,pResult\0int\0\0DirectIO(int,int&,QString&)\0"
    "Command,pData,pString\0int\0\0EndCapture()\0\0int\0\0Identify(int,int,bool,QVariant,QVariant&,int)\0MaxFARRequested,MaxFRRRequested,FARPrecedence,ReferenceBIRPopulation,pCandidateRanking,Timeout\0int\0\0IdentifyMatch(int,int,bool,QString,QVariant,QVariant&)\0"
    "MaxFARRequested,MaxFRRRequested,FARPrecedence,SampleBIR,ReferenceBIRPopulation,pCandidateRanking\0int\0\0Open(QString)\0DeviceName\0int\0\0ProcessPrematchData(QString,QString,QString&)\0CapturedBIR,PrematchDataBIR,pProcessedBIR\0"
    "int\0\0ReleaseDevice()\0\0int\0\0ResetStatistics(QString)\0StatisticsBuffer\0int\0\0RetrieveStatistics(QString&)\0pStatisticsBuffer\0int\0\0SOData(int)\0Status\0\0\0SODirectIO(int,int&,QString&)\0EventNumber,pData,pString\0"
    "\0\0SOError(int,int,int,int&)\0ResultCode,ResultCodeExtended,ErrorLocus,pErrorResponse\0\0\0SOOutputCompleteDummy(int)\0OutputID\0\0\0SOProcessID()\0\0int\0\0SOStatusUpdate(int)\0Data\0\0\0SetAlgorithm(int)\0Algorithm\0\0\0"
    "SetAutoDisable(bool)\0AutoDisable\0\0\0SetBinaryConversion(int)\0BinaryConversion\0\0\0SetDataEventEnabled(bool)\0DataEventEnabled\0\0\0SetDeviceEnabled(bool)\0DeviceEnabled\0\0\0SetFreezeEvents(bool)\0FreezeEvents\0\0\0SetPowerNotify(int)\0"
    "PowerNotify\0\0\0SetRealTimeDataEnabled(bool)\0RealTimeDataEnabled\0\0\0SetSensorColor(int)\0SensorColor\0\0\0SetSensorOrientation(int)\0SensorOrientation\0\0\0SetSensorType(int)\0SensorType\0\0\0UpdateFirmware(QString)\0"
    "FirmwareFileName\0int\0\0UpdateStatistics(QString)\0StatisticsBuffer\0int\0\0Verify(int,int,bool,QString,QString&,bool&,int&,int&,QString&,int)\0MaxFARRequested,MaxFRRRequested,FARPrecedence,ReferenceBIR,pAdaptedBIR,pResult,pFARAchieved,pFRRAchieved,pPayload,Timeout\0"
    "int\0\0VerifyMatch(int,int,bool,QString,QString,QString&,bool&,int&,int&,QString&)\0MaxFARRequested,MaxFRRRequested,FARPrecedence,SampleBIR,ReferenceBIR,pAdaptedBIR,pResult,pFARAchieved,pFRRAchieved,pPayload\0"
    "int\0\0"
    "Algorithm\0int\0AlgorithmList\0QString\0AutoDisable\0bool\0BIR\0QString\0BinaryConversion\0int\0CapCompareFirmwareVersion\0bool\0CapPowerReporting\0int\0CapPrematchData\0bool\0CapRawSensorData\0bool\0CapRealTimeData\0"
    "bool\0CapSensorColor\0int\0CapSensorOrientation\0int\0CapSensorType\0int\0CapStatisticsReporting\0bool\0CapTemplateAdaptation\0bool\0CapUpdateFirmware\0bool\0CapUpdateStatistics\0bool\0CheckHealthText\0QString\0Claimed\0"
    "bool\0ControlObjectDescription\0QString\0ControlObjectVersion\0int\0DataCount\0int\0DataEventEnabled\0bool\0DeviceDescription\0QString\0DeviceEnabled\0bool\0DeviceName\0QString\0FreezeEvents\0bool\0OpenResult\0int\0PowerNotify\0"
    "int\0PowerState\0int\0RawSensorData\0QString\0RealTimeDataEnabled\0bool\0ResultCode\0int\0ResultCodeExtended\0int\0SensorBPP\0int\0SensorColor\0int\0SensorHeight\0int\0SensorOrientation\0int\0SensorType\0int\0SensorWidth\0int\0"
    "ServiceObjectDescription\0QString\0ServiceObjectVersion\0int\0State\0int\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + 0];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
    }

    return data;
};

const QMetaObject IOPOSBiometrics::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPOS__IOPOSBiometrics(),
qt_meta_data_OPOS__IOPOSBiometrics }
};

void *IOPOSBiometrics::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPOS__IOPOSBiometrics()))
        return static_cast<void*>(const_cast<IOPOSBiometrics*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPOS__IOPOSBiometrics_1_10[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       41,    10, // methods
       44,    215, // properties
       0,    0, // enums/sets

 // signals: signature, parameters, type, tag, flags
       27, 66, 88, 89, 5,
       90, 115, 120, 121, 5,
       122, 148, 163, 164, 5,

 // slots: signature, parameters, type, tag, flags
       165, 201, 222, 226, 9,
       227, 248, 249, 253, 9,
       254, 271, 277, 281, 9,
       282, 299, 307, 311, 9,
       312, 325, 326, 330, 9,
       331, 354, 355, 359, 9,
       360, 368, 369, 373, 9,
       374, 411, 436, 440, 9,
       441, 469, 491, 495, 9,
       496, 509, 510, 514, 9,
       515, 561, 656, 660, 9,
       661, 716, 813, 817, 9,
       818, 832, 843, 847, 9,
       848, 894, 936, 940, 9,
       941, 957, 958, 962, 9,
       963, 988, 1005, 1009, 9,
       1010, 1039, 1057, 1061, 9,
       1062, 1074, 1081, 1082, 9,
       1083, 1113, 1139, 1140, 9,
       1141, 1167, 1223, 1224, 9,
       1225, 1252, 1261, 1262, 9,
       1263, 1277, 1278, 1282, 9,
       1283, 1303, 1308, 1309, 9,
       1310, 1328, 1338, 1339, 9,
       1340, 1361, 1373, 1374, 9,
       1375, 1400, 1417, 1418, 9,
       1419, 1445, 1462, 1463, 9,
       1464, 1487, 1501, 1502, 9,
       1503, 1525, 1538, 1539, 9,
       1540, 1560, 1572, 1573, 9,
       1574, 1603, 1623, 1624, 9,
       1625, 1645, 1657, 1658, 9,
       1659, 1685, 1703, 1704, 9,
       1705, 1724, 1735, 1736, 9,
       1737, 1761, 1778, 1782, 9,
       1783, 1809, 1826, 1830, 9,
       1831, 1898, 2020, 2024, 9,
       2025, 2101, 2225, 2229, 9,

 // properties: name, type, flags
       2230, 2240, 0x02015003, 		 // int Algorithm
       2244, 2258, 0x0a005001, 		 // QString AlgorithmList
       2266, 2278, 0x01015003, 		 // bool AutoDisable
       2283, 2287, 0x0a005001, 		 // QString BIR
       2295, 2312, 0x02015003, 		 // int BinaryConversion
       2316, 2342, 0x01005001, 		 // bool CapCompareFirmwareVersion
       2347, 2365, 0x02005001, 		 // int CapPowerReporting
       2369, 2385, 0x01005001, 		 // bool CapPrematchData
       2390, 2407, 0x01005001, 		 // bool CapRawSensorData
       2412, 2428, 0x01005001, 		 // bool CapRealTimeData
       2433, 2448, 0x02005001, 		 // int CapSensorColor
       2452, 2473, 0x02005001, 		 // int CapSensorOrientation
       2477, 2491, 0x02005001, 		 // int CapSensorType
       2495, 2518, 0x01005001, 		 // bool CapStatisticsReporting
       2523, 2545, 0x01005001, 		 // bool CapTemplateAdaptation
       2550, 2568, 0x01005001, 		 // bool CapUpdateFirmware
       2573, 2593, 0x01005001, 		 // bool CapUpdateStatistics
       2598, 2614, 0x0a005001, 		 // QString CheckHealthText
       2622, 2630, 0x01005001, 		 // bool Claimed
       2635, 2660, 0x0a005001, 		 // QString ControlObjectDescription
       2668, 2689, 0x02005001, 		 // int ControlObjectVersion
       2693, 2703, 0x02005001, 		 // int DataCount
       2707, 2724, 0x01015003, 		 // bool DataEventEnabled
       2729, 2747, 0x0a005001, 		 // QString DeviceDescription
       2755, 2769, 0x01015003, 		 // bool DeviceEnabled
       2774, 2785, 0x0a005001, 		 // QString DeviceName
       2793, 2806, 0x01015003, 		 // bool FreezeEvents
       2811, 2822, 0x02005001, 		 // int OpenResult
       2826, 2838, 0x02015003, 		 // int PowerNotify
       2842, 2853, 0x02005001, 		 // int PowerState
       2857, 2871, 0x0a005001, 		 // QString RawSensorData
       2879, 2899, 0x01015003, 		 // bool RealTimeDataEnabled
       2904, 2915, 0x02005001, 		 // int ResultCode
       2919, 2938, 0x02005001, 		 // int ResultCodeExtended
       2942, 2952, 0x02005001, 		 // int SensorBPP
       2956, 2968, 0x02015003, 		 // int SensorColor
       2972, 2985, 0x02005001, 		 // int SensorHeight
       2989, 3007, 0x02015003, 		 // int SensorOrientation
       3011, 3022, 0x02015003, 		 // int SensorType
       3026, 3038, 0x02005001, 		 // int SensorWidth
       3042, 3067, 0x0a005001, 		 // QString ServiceObjectDescription
       3075, 3096, 0x02005001, 		 // int ServiceObjectVersion
       3100, 3106, 0x02005001, 		 // int State
       3110, 3118, 0x0a055003, 		 // QString control

        0        // eod
};

static const char *qt_meta_stringdata_OPOS__IOPOSBiometrics_1_10() {
    static const char stringdata0[] = {
    "OPOS::IOPOSBiometrics_1_10\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "BeginEnrollCapture(QString,QString)\0ReferenceBIR,Payload\0int\0\0BeginVerifyCapture()\0"
    "\0int\0\0CheckHealth(int)\0Level\0int\0\0ClaimDevice(int)\0Timeout\0int\0\0ClearInput()\0\0int\0\0ClearInputProperties()\0\0int\0\0Close()\0\0int\0\0CompareFirmwareVersion(QString,int&)\0FirmwareFileName,pResult\0int\0\0DirectIO(int,int&,QString&)\0"
    "Command,pData,pString\0int\0\0EndCapture()\0\0int\0\0Identify(int,int,bool,QVariant,QVariant&,int)\0MaxFARRequested,MaxFRRRequested,FARPrecedence,ReferenceBIRPopulation,pCandidateRanking,Timeout\0int\0\0IdentifyMatch(int,int,bool,QString,QVariant,QVariant&)\0"
    "MaxFARRequested,MaxFRRRequested,FARPrecedence,SampleBIR,ReferenceBIRPopulation,pCandidateRanking\0int\0\0Open(QString)\0DeviceName\0int\0\0ProcessPrematchData(QString,QString,QString&)\0CapturedBIR,PrematchDataBIR,pProcessedBIR\0"
    "int\0\0ReleaseDevice()\0\0int\0\0ResetStatistics(QString)\0StatisticsBuffer\0int\0\0RetrieveStatistics(QString&)\0pStatisticsBuffer\0int\0\0SOData(int)\0Status\0\0\0SODirectIO(int,int&,QString&)\0EventNumber,pData,pString\0"
    "\0\0SOError(int,int,int,int&)\0ResultCode,ResultCodeExtended,ErrorLocus,pErrorResponse\0\0\0SOOutputCompleteDummy(int)\0OutputID\0\0\0SOProcessID()\0\0int\0\0SOStatusUpdate(int)\0Data\0\0\0SetAlgorithm(int)\0Algorithm\0\0\0"
    "SetAutoDisable(bool)\0AutoDisable\0\0\0SetBinaryConversion(int)\0BinaryConversion\0\0\0SetDataEventEnabled(bool)\0DataEventEnabled\0\0\0SetDeviceEnabled(bool)\0DeviceEnabled\0\0\0SetFreezeEvents(bool)\0FreezeEvents\0\0\0SetPowerNotify(int)\0"
    "PowerNotify\0\0\0SetRealTimeDataEnabled(bool)\0RealTimeDataEnabled\0\0\0SetSensorColor(int)\0SensorColor\0\0\0SetSensorOrientation(int)\0SensorOrientation\0\0\0SetSensorType(int)\0SensorType\0\0\0UpdateFirmware(QString)\0"
    "FirmwareFileName\0int\0\0UpdateStatistics(QString)\0StatisticsBuffer\0int\0\0Verify(int,int,bool,QString,QString&,bool&,int&,int&,QString&,int)\0MaxFARRequested,MaxFRRRequested,FARPrecedence,ReferenceBIR,pAdaptedBIR,pResult,pFARAchieved,pFRRAchieved,pPayload,Timeout\0"
    "int\0\0VerifyMatch(int,int,bool,QString,QString,QString&,bool&,int&,int&,QString&)\0MaxFARRequested,MaxFRRRequested,FARPrecedence,SampleBIR,ReferenceBIR,pAdaptedBIR,pResult,pFARAchieved,pFRRAchieved,pPayload\0"
    "int\0\0"
    "Algorithm\0int\0AlgorithmList\0QString\0AutoDisable\0bool\0BIR\0QString\0BinaryConversion\0int\0CapCompareFirmwareVersion\0bool\0CapPowerReporting\0int\0CapPrematchData\0bool\0CapRawSensorData\0bool\0CapRealTimeData\0"
    "bool\0CapSensorColor\0int\0CapSensorOrientation\0int\0CapSensorType\0int\0CapStatisticsReporting\0bool\0CapTemplateAdaptation\0bool\0CapUpdateFirmware\0bool\0CapUpdateStatistics\0bool\0CheckHealthText\0QString\0Claimed\0"
    "bool\0ControlObjectDescription\0QString\0ControlObjectVersion\0int\0DataCount\0int\0DataEventEnabled\0bool\0DeviceDescription\0QString\0DeviceEnabled\0bool\0DeviceName\0QString\0FreezeEvents\0bool\0OpenResult\0int\0PowerNotify\0"
    "int\0PowerState\0int\0RawSensorData\0QString\0RealTimeDataEnabled\0bool\0ResultCode\0int\0ResultCodeExtended\0int\0SensorBPP\0int\0SensorColor\0int\0SensorHeight\0int\0SensorOrientation\0int\0SensorType\0int\0SensorWidth\0int\0"
    "ServiceObjectDescription\0QString\0ServiceObjectVersion\0int\0State\0int\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + 0];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
    }

    return data;
};

const QMetaObject IOPOSBiometrics_1_10::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPOS__IOPOSBiometrics_1_10(),
qt_meta_data_OPOS__IOPOSBiometrics_1_10 }
};

void *IOPOSBiometrics_1_10::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPOS__IOPOSBiometrics_1_10()))
        return static_cast<void*>(const_cast<IOPOSBiometrics_1_10*>(this));
    return QAxObject::qt_metacast(_clname);
}

