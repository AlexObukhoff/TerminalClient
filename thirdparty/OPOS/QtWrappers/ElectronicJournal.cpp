/****************************************************************************
**
** Metadata for OPOS generated by dumpcpp from type library
** OPOS\CommonCO\OPOSElectronicJournal.ocx
**
****************************************************************************/

#define QAX_DUMPCPP_OPOS_NOINLINES
#include "OPOS\QtWrappers\ElectronicJournal.h"

using namespace OPOS;

static const uint qt_meta_data_OPOS__OPOSElectronicJournal[] = {

 // content:
       1,       // revision
       0,       // classname
       3,    10, // classinfo
       54,    16, // methods
       51,    286, // properties
       0,    0, // enums/sets

 // classinfo: key, value
       28, 46, 
       76, 88, 
       111, 123, 

 // signals: signature, parameters, type, tag, flags
       151, 166, 173, 174, 5,
       175, 208, 234, 235, 5,
       236, 265, 321, 322, 5,
       323, 348, 357, 358, 5,
       359, 382, 387, 388, 5,
       389, 428, 450, 451, 5,
       452, 477, 482, 483, 5,
       484, 510, 525, 526, 5,

 // slots: signature, parameters, type, tag, flags
       527, 546, 553, 557, 9,
       558, 579, 580, 584, 9,
       585, 606, 607, 611, 9,
       612, 629, 635, 639, 9,
       640, 657, 665, 669, 9,
       670, 683, 684, 688, 9,
       689, 703, 704, 708, 9,
       709, 717, 718, 722, 9,
       723, 760, 785, 789, 9,
       790, 818, 840, 844, 9,
       845, 859, 860, 864, 9,
       865, 891, 900, 904, 9,
       905, 919, 930, 934, 9,
       935, 965, 985, 989, 9,
       990, 1016, 1025, 1029, 9,
       1030, 1068, 1097, 1101, 9,
       1102, 1118, 1119, 1123, 9,
       1124, 1149, 1166, 1170, 9,
       1171, 1192, 1193, 1197, 9,
       1198, 1219, 1220, 1224, 9,
       1225, 1261, 1280, 1284, 9,
       1285, 1322, 1370, 1374, 9,
       1375, 1430, 1471, 1475, 9,
       1476, 1518, 1535, 1539, 9,
       1540, 1569, 1587, 1591, 9,
       1592, 1604, 1611, 1612, 9,
       1613, 1643, 1669, 1670, 9,
       1671, 1697, 1753, 1754, 9,
       1755, 1777, 1786, 1787, 9,
       1788, 1802, 1803, 1807, 9,
       1808, 1828, 1833, 1834, 9,
       1835, 1854, 1864, 1865, 9,
       1866, 1887, 1899, 1900, 9,
       1901, 1926, 1943, 1944, 9,
       1945, 1971, 1988, 1989, 9,
       1990, 2013, 2027, 2028, 9,
       2029, 2051, 2064, 2065, 9,
       2066, 2088, 2101, 2102, 9,
       2103, 2123, 2135, 2136, 9,
       2137, 2153, 2161, 2162, 9,
       2163, 2187, 2202, 2203, 9,
       2204, 2223, 2233, 2234, 9,
       2235, 2257, 2258, 2262, 9,
       2263, 2285, 2286, 2290, 9,
       2291, 2315, 2332, 2336, 9,
       2337, 2363, 2380, 2384, 9,

 // properties: name, type, flags
       2385, 2395, 0x01015003, 		 // bool AsyncMode
       2400, 2412, 0x01015003, 		 // bool AutoDisable
       2417, 2434, 0x02015003, 		 // int BinaryConversion
       2438, 2451, 0x01005001, 		 // bool CapAddMarker
       2456, 2482, 0x01005001, 		 // bool CapCompareFirmwareVersion
       2487, 2505, 0x01005001, 		 // bool CapErasableMedium
       2510, 2530, 0x01005001, 		 // bool CapInitializeMedium
       2535, 2556, 0x01005001, 		 // bool CapMediumIsAvailable
       2561, 2579, 0x02005001, 		 // int CapPowerReporting
       2583, 2599, 0x01005001, 		 // bool CapPrintContent
       2604, 2624, 0x01005001, 		 // bool CapPrintContentFile
       2629, 2654, 0x01005001, 		 // bool CapRetrieveCurrentMarker
       2659, 2677, 0x01005001, 		 // bool CapRetrieveMarker
       2682, 2710, 0x01005001, 		 // bool CapRetrieveMarkerByDateTime
       2715, 2742, 0x01005001, 		 // bool CapRetrieveMarkersDateTime
       2747, 2758, 0x02005001, 		 // int CapStation
       2762, 2785, 0x01005001, 		 // bool CapStatisticsReporting
       2790, 2808, 0x01005001, 		 // bool CapStorageEnabled
       2813, 2836, 0x01005001, 		 // bool CapSuspendPrintContent
       2841, 2864, 0x01005001, 		 // bool CapSuspendQueryContent
       2869, 2887, 0x01005001, 		 // bool CapUpdateFirmware
       2892, 2912, 0x01005001, 		 // bool CapUpdateStatistics
       2917, 2930, 0x01005001, 		 // bool CapWaterMark
       2935, 2951, 0x0a005001, 		 // QString CheckHealthText
       2959, 2967, 0x01005001, 		 // bool Claimed
       2972, 2997, 0x0a005001, 		 // QString ControlObjectDescription
       3005, 3026, 0x02005001, 		 // int ControlObjectVersion
       3030, 3040, 0x02005001, 		 // int DataCount
       3044, 3061, 0x01015003, 		 // bool DataEventEnabled
       3066, 3084, 0x0a005001, 		 // QString DeviceDescription
       3092, 3106, 0x01015003, 		 // bool DeviceEnabled
       3111, 3122, 0x0a005001, 		 // QString DeviceName
       3130, 3143, 0x01015003, 		 // bool FlagWhenIdle
       3148, 3161, 0x01015003, 		 // bool FreezeEvents
       3166, 3182, 0x04005001, 		 // qlonglong MediumFreeSpace
       3192, 3201, 0x0a005001, 		 // QString MediumID
       3209, 3227, 0x01005001, 		 // bool MediumIsAvailable
       3232, 3243, 0x04005001, 		 // qlonglong MediumSize
       3253, 3264, 0x02005001, 		 // int OpenResult
       3268, 3277, 0x02005001, 		 // int OutputID
       3281, 3293, 0x02015003, 		 // int PowerNotify
       3297, 3308, 0x02005001, 		 // int PowerState
       3312, 3323, 0x02005001, 		 // int ResultCode
       3327, 3346, 0x02005001, 		 // int ResultCodeExtended
       3350, 3375, 0x0a005001, 		 // QString ServiceObjectDescription
       3383, 3404, 0x02005001, 		 // int ServiceObjectVersion
       3408, 3414, 0x02005001, 		 // int State
       3418, 3426, 0x02015003, 		 // int Station
       3430, 3445, 0x01015003, 		 // bool StorageEnabled
       3450, 3460, 0x01005001, 		 // bool Suspended
       3465, 3475, 0x01015003, 		 // bool WaterMark

        0        // eod
};

static const char *qt_meta_stringdata_OPOS__OPOSElectronicJournal() {
    static const char stringdata0[] = {
    "OPOS::OPOSElectronicJournal\0"
    "Event Interface 2\0_IOPOSElectronicJournalEvents\0Interface 0\0IOPOSElectronicJournal\0Interface 1\0IOPOSElectronicJournal_1_10\0"
    "DataEvent(int)\0Status\0\0\0DirectIOEvent(int,int&,QString&)\0EventNumber,pData,pString\0"
    "\0\0ErrorEvent(int,int,int,int&)\0ResultCode,ResultCodeExtended,ErrorLocus,pErrorResponse\0\0\0OutputCompleteEvent(int)\0OutputID\0\0\0StatusUpdateEvent(int)\0Data\0\0\0exception(int,QString,QString,QString)\0code,source,disc,help\0"
    "\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "AddMarker(QString)\0Marker\0int\0\0CancelPrintContent()\0\0int\0\0CancelQueryContent()\0\0int\0\0CheckHealth(int)\0Level\0int\0\0ClaimDevice(int)\0"
    "Timeout\0int\0\0ClearInput()\0\0int\0\0ClearOutput()\0\0int\0\0Close()\0\0int\0\0CompareFirmwareVersion(QString,int&)\0FirmwareFileName,pResult\0int\0\0DirectIO(int,int&,QString&)\0Command,pData,pString\0int\0\0EraseMedium()\0"
    "\0int\0\0InitializeMedium(QString)\0MediumID\0int\0\0Open(QString)\0DeviceName\0int\0\0PrintContent(QString,QString)\0FromMarker,ToMarker\0int\0\0PrintContentFile(QString)\0FileName\0int\0\0QueryContent(QString,QString,QString)\0"
    "FileName,FromMarker,ToMarker\0int\0\0ReleaseDevice()\0\0int\0\0ResetStatistics(QString)\0StatisticsBuffer\0int\0\0ResumePrintContent()\0\0int\0\0ResumeQueryContent()\0\0int\0\0RetrieveCurrentMarker(int,QString&)\0MarkerType,pMarker\0"
    "int\0\0RetrieveMarker(int,int,int,QString&)\0MarkerType,SessionNumber,DocumentNumber,pMarker\0int\0\0RetrieveMarkerByDateTime(int,QString,QString,QString&)\0MarkerType,DateTime,MarkerNumber,pMarker\0int\0\0RetrieveMarkersDateTime(QString,QString&)\0"
    "Marker,pDateTime\0int\0\0RetrieveStatistics(QString&)\0pStatisticsBuffer\0int\0\0SOData(int)\0Status\0\0\0SODirectIO(int,int&,QString&)\0EventNumber,pData,pString\0\0\0SOError(int,int,int,int&)\0ResultCode,ResultCodeExtended,ErrorLocus,pErrorResponse\0"
    "\0\0SOOutputComplete(int)\0OutputID\0\0\0SOProcessID()\0\0int\0\0SOStatusUpdate(int)\0Data\0\0\0SetAsyncMode(bool)\0AsyncMode\0\0\0SetAutoDisable(bool)\0AutoDisable\0\0\0SetBinaryConversion(int)\0BinaryConversion\0\0\0SetDataEventEnabled(bool)\0"
    "DataEventEnabled\0\0\0SetDeviceEnabled(bool)\0DeviceEnabled\0\0\0SetFlagWhenIdle(bool)\0FlagWhenIdle\0\0\0SetFreezeEvents(bool)\0FreezeEvents\0\0\0SetPowerNotify(int)\0PowerNotify\0\0\0SetStation(int)\0Station\0\0\0SetStorageEnabled(bool)\0"
    "StorageEnabled\0\0\0SetWaterMark(bool)\0WaterMark\0\0\0SuspendPrintContent()\0\0int\0\0SuspendQueryContent()\0\0int\0\0UpdateFirmware(QString)\0FirmwareFileName\0int\0\0UpdateStatistics(QString)\0StatisticsBuffer\0int\0\0"
    "AsyncMode\0"
    "bool\0AutoDisable\0bool\0BinaryConversion\0int\0CapAddMarker\0bool\0CapCompareFirmwareVersion\0bool\0CapErasableMedium\0bool\0CapInitializeMedium\0bool\0CapMediumIsAvailable\0bool\0CapPowerReporting\0int\0CapPrintContent\0"
    "bool\0CapPrintContentFile\0bool\0CapRetrieveCurrentMarker\0bool\0CapRetrieveMarker\0bool\0CapRetrieveMarkerByDateTime\0bool\0CapRetrieveMarkersDateTime\0bool\0CapStation\0int\0CapStatisticsReporting\0bool\0CapStorageEnabled\0"
    "bool\0CapSuspendPrintContent\0bool\0CapSuspendQueryContent\0bool\0CapUpdateFirmware\0bool\0CapUpdateStatistics\0bool\0CapWaterMark\0bool\0CheckHealthText\0QString\0Claimed\0bool\0ControlObjectDescription\0QString\0ControlObjectVersion\0"
    "int\0DataCount\0int\0DataEventEnabled\0bool\0DeviceDescription\0QString\0DeviceEnabled\0bool\0DeviceName\0QString\0FlagWhenIdle\0bool\0FreezeEvents\0bool\0MediumFreeSpace\0qlonglong\0MediumID\0QString\0MediumIsAvailable\0"
    "bool\0MediumSize\0qlonglong\0OpenResult\0int\0OutputID\0int\0PowerNotify\0int\0PowerState\0int\0ResultCode\0int\0ResultCodeExtended\0int\0ServiceObjectDescription\0QString\0ServiceObjectVersion\0int\0State\0int\0Station\0int\0"
    "StorageEnabled\0bool\0Suspended\0bool\0WaterMark\0bool\0"
    };
    static char data[sizeof(stringdata0) + 0];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
    }

    return data;
};

const QMetaObject OPOSElectronicJournal::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPOS__OPOSElectronicJournal(),
qt_meta_data_OPOS__OPOSElectronicJournal }
};

void *OPOSElectronicJournal::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPOS__OPOSElectronicJournal()))
        return static_cast<void*>(const_cast<OPOSElectronicJournal*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPOS__IOPOSElectronicJournal[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       49,    10, // methods
       52,    255, // properties
       0,    0, // enums/sets

 // signals: signature, parameters, type, tag, flags
       29, 68, 90, 91, 5,
       92, 117, 122, 123, 5,
       124, 150, 165, 166, 5,

 // slots: signature, parameters, type, tag, flags
       167, 186, 193, 197, 9,
       198, 219, 220, 224, 9,
       225, 246, 247, 251, 9,
       252, 269, 275, 279, 9,
       280, 297, 305, 309, 9,
       310, 323, 324, 328, 9,
       329, 343, 344, 348, 9,
       349, 357, 358, 362, 9,
       363, 400, 425, 429, 9,
       430, 458, 480, 484, 9,
       485, 499, 500, 504, 9,
       505, 531, 540, 544, 9,
       545, 559, 570, 574, 9,
       575, 605, 625, 629, 9,
       630, 656, 665, 669, 9,
       670, 708, 737, 741, 9,
       742, 758, 759, 763, 9,
       764, 789, 806, 810, 9,
       811, 832, 833, 837, 9,
       838, 859, 860, 864, 9,
       865, 901, 920, 924, 9,
       925, 962, 1010, 1014, 9,
       1015, 1070, 1111, 1115, 9,
       1116, 1158, 1175, 1179, 9,
       1180, 1209, 1227, 1231, 9,
       1232, 1244, 1251, 1252, 9,
       1253, 1283, 1309, 1310, 9,
       1311, 1337, 1393, 1394, 9,
       1395, 1417, 1426, 1427, 9,
       1428, 1442, 1443, 1447, 9,
       1448, 1468, 1473, 1474, 9,
       1475, 1494, 1504, 1505, 9,
       1506, 1527, 1539, 1540, 9,
       1541, 1566, 1583, 1584, 9,
       1585, 1611, 1628, 1629, 9,
       1630, 1653, 1667, 1668, 9,
       1669, 1691, 1704, 1705, 9,
       1706, 1728, 1741, 1742, 9,
       1743, 1763, 1775, 1776, 9,
       1777, 1793, 1801, 1802, 9,
       1803, 1827, 1842, 1843, 9,
       1844, 1863, 1873, 1874, 9,
       1875, 1897, 1898, 1902, 9,
       1903, 1925, 1926, 1930, 9,
       1931, 1955, 1972, 1976, 9,
       1977, 2003, 2020, 2024, 9,

 // properties: name, type, flags
       2025, 2035, 0x01015003, 		 // bool AsyncMode
       2040, 2052, 0x01015003, 		 // bool AutoDisable
       2057, 2074, 0x02015003, 		 // int BinaryConversion
       2078, 2091, 0x01005001, 		 // bool CapAddMarker
       2096, 2122, 0x01005001, 		 // bool CapCompareFirmwareVersion
       2127, 2145, 0x01005001, 		 // bool CapErasableMedium
       2150, 2170, 0x01005001, 		 // bool CapInitializeMedium
       2175, 2196, 0x01005001, 		 // bool CapMediumIsAvailable
       2201, 2219, 0x02005001, 		 // int CapPowerReporting
       2223, 2239, 0x01005001, 		 // bool CapPrintContent
       2244, 2264, 0x01005001, 		 // bool CapPrintContentFile
       2269, 2294, 0x01005001, 		 // bool CapRetrieveCurrentMarker
       2299, 2317, 0x01005001, 		 // bool CapRetrieveMarker
       2322, 2350, 0x01005001, 		 // bool CapRetrieveMarkerByDateTime
       2355, 2382, 0x01005001, 		 // bool CapRetrieveMarkersDateTime
       2387, 2398, 0x02005001, 		 // int CapStation
       2402, 2425, 0x01005001, 		 // bool CapStatisticsReporting
       2430, 2448, 0x01005001, 		 // bool CapStorageEnabled
       2453, 2476, 0x01005001, 		 // bool CapSuspendPrintContent
       2481, 2504, 0x01005001, 		 // bool CapSuspendQueryContent
       2509, 2527, 0x01005001, 		 // bool CapUpdateFirmware
       2532, 2552, 0x01005001, 		 // bool CapUpdateStatistics
       2557, 2570, 0x01005001, 		 // bool CapWaterMark
       2575, 2591, 0x0a005001, 		 // QString CheckHealthText
       2599, 2607, 0x01005001, 		 // bool Claimed
       2612, 2637, 0x0a005001, 		 // QString ControlObjectDescription
       2645, 2666, 0x02005001, 		 // int ControlObjectVersion
       2670, 2680, 0x02005001, 		 // int DataCount
       2684, 2701, 0x01015003, 		 // bool DataEventEnabled
       2706, 2724, 0x0a005001, 		 // QString DeviceDescription
       2732, 2746, 0x01015003, 		 // bool DeviceEnabled
       2751, 2762, 0x0a005001, 		 // QString DeviceName
       2770, 2783, 0x01015003, 		 // bool FlagWhenIdle
       2788, 2801, 0x01015003, 		 // bool FreezeEvents
       2806, 2822, 0x04005001, 		 // qlonglong MediumFreeSpace
       2832, 2841, 0x0a005001, 		 // QString MediumID
       2849, 2867, 0x01005001, 		 // bool MediumIsAvailable
       2872, 2883, 0x04005001, 		 // qlonglong MediumSize
       2893, 2904, 0x02005001, 		 // int OpenResult
       2908, 2917, 0x02005001, 		 // int OutputID
       2921, 2933, 0x02015003, 		 // int PowerNotify
       2937, 2948, 0x02005001, 		 // int PowerState
       2952, 2963, 0x02005001, 		 // int ResultCode
       2967, 2986, 0x02005001, 		 // int ResultCodeExtended
       2990, 3015, 0x0a005001, 		 // QString ServiceObjectDescription
       3023, 3044, 0x02005001, 		 // int ServiceObjectVersion
       3048, 3054, 0x02005001, 		 // int State
       3058, 3066, 0x02015003, 		 // int Station
       3070, 3085, 0x01015003, 		 // bool StorageEnabled
       3090, 3100, 0x01005001, 		 // bool Suspended
       3105, 3115, 0x01015003, 		 // bool WaterMark
       3120, 3128, 0x0a055003, 		 // QString control

        0        // eod
};

static const char *qt_meta_stringdata_OPOS__IOPOSElectronicJournal() {
    static const char stringdata0[] = {
    "OPOS::IOPOSElectronicJournal\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "AddMarker(QString)\0Marker\0int\0\0CancelPrintContent()\0\0int\0\0CancelQueryContent()\0"
    "\0int\0\0CheckHealth(int)\0Level\0int\0\0ClaimDevice(int)\0Timeout\0int\0\0ClearInput()\0\0int\0\0ClearOutput()\0\0int\0\0Close()\0\0int\0\0CompareFirmwareVersion(QString,int&)\0FirmwareFileName,pResult\0int\0\0DirectIO(int,int&,QString&)\0"
    "Command,pData,pString\0int\0\0EraseMedium()\0\0int\0\0InitializeMedium(QString)\0MediumID\0int\0\0Open(QString)\0DeviceName\0int\0\0PrintContent(QString,QString)\0FromMarker,ToMarker\0int\0\0PrintContentFile(QString)\0FileName\0"
    "int\0\0QueryContent(QString,QString,QString)\0FileName,FromMarker,ToMarker\0int\0\0ReleaseDevice()\0\0int\0\0ResetStatistics(QString)\0StatisticsBuffer\0int\0\0ResumePrintContent()\0\0int\0\0ResumeQueryContent()\0\0int\0\0RetrieveCurrentMarker(int,QString&)\0"
    "MarkerType,pMarker\0int\0\0RetrieveMarker(int,int,int,QString&)\0MarkerType,SessionNumber,DocumentNumber,pMarker\0int\0\0RetrieveMarkerByDateTime(int,QString,QString,QString&)\0MarkerType,DateTime,MarkerNumber,pMarker\0"
    "int\0\0RetrieveMarkersDateTime(QString,QString&)\0Marker,pDateTime\0int\0\0RetrieveStatistics(QString&)\0pStatisticsBuffer\0int\0\0SOData(int)\0Status\0\0\0SODirectIO(int,int&,QString&)\0EventNumber,pData,pString\0\0\0SOError(int,int,int,int&)\0"
    "ResultCode,ResultCodeExtended,ErrorLocus,pErrorResponse\0\0\0SOOutputComplete(int)\0OutputID\0\0\0SOProcessID()\0\0int\0\0SOStatusUpdate(int)\0Data\0\0\0SetAsyncMode(bool)\0AsyncMode\0\0\0SetAutoDisable(bool)\0AutoDisable\0"
    "\0\0SetBinaryConversion(int)\0BinaryConversion\0\0\0SetDataEventEnabled(bool)\0DataEventEnabled\0\0\0SetDeviceEnabled(bool)\0DeviceEnabled\0\0\0SetFlagWhenIdle(bool)\0FlagWhenIdle\0\0\0SetFreezeEvents(bool)\0FreezeEvents\0"
    "\0\0SetPowerNotify(int)\0PowerNotify\0\0\0SetStation(int)\0Station\0\0\0SetStorageEnabled(bool)\0StorageEnabled\0\0\0SetWaterMark(bool)\0WaterMark\0\0\0SuspendPrintContent()\0\0int\0\0SuspendQueryContent()\0\0int\0\0UpdateFirmware(QString)\0"
    "FirmwareFileName\0int\0\0UpdateStatistics(QString)\0StatisticsBuffer\0int\0\0"
    "AsyncMode\0bool\0AutoDisable\0bool\0BinaryConversion\0int\0CapAddMarker\0bool\0CapCompareFirmwareVersion\0bool\0CapErasableMedium\0bool\0CapInitializeMedium\0"
    "bool\0CapMediumIsAvailable\0bool\0CapPowerReporting\0int\0CapPrintContent\0bool\0CapPrintContentFile\0bool\0CapRetrieveCurrentMarker\0bool\0CapRetrieveMarker\0bool\0CapRetrieveMarkerByDateTime\0bool\0CapRetrieveMarkersDateTime\0"
    "bool\0CapStation\0int\0CapStatisticsReporting\0bool\0CapStorageEnabled\0bool\0CapSuspendPrintContent\0bool\0CapSuspendQueryContent\0bool\0CapUpdateFirmware\0bool\0CapUpdateStatistics\0bool\0CapWaterMark\0bool\0CheckHealthText\0"
    "QString\0Claimed\0bool\0ControlObjectDescription\0QString\0ControlObjectVersion\0int\0DataCount\0int\0DataEventEnabled\0bool\0DeviceDescription\0QString\0DeviceEnabled\0bool\0DeviceName\0QString\0FlagWhenIdle\0bool\0FreezeEvents\0"
    "bool\0MediumFreeSpace\0qlonglong\0MediumID\0QString\0MediumIsAvailable\0bool\0MediumSize\0qlonglong\0OpenResult\0int\0OutputID\0int\0PowerNotify\0int\0PowerState\0int\0ResultCode\0int\0ResultCodeExtended\0int\0ServiceObjectDescription\0"
    "QString\0ServiceObjectVersion\0int\0State\0int\0Station\0int\0StorageEnabled\0bool\0Suspended\0bool\0WaterMark\0bool\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + 0];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
    }

    return data;
};

const QMetaObject IOPOSElectronicJournal::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPOS__IOPOSElectronicJournal(),
qt_meta_data_OPOS__IOPOSElectronicJournal }
};

void *IOPOSElectronicJournal::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPOS__IOPOSElectronicJournal()))
        return static_cast<void*>(const_cast<IOPOSElectronicJournal*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_OPOS__IOPOSElectronicJournal_1_10[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       49,    10, // methods
       52,    255, // properties
       0,    0, // enums/sets

 // signals: signature, parameters, type, tag, flags
       34, 73, 95, 96, 5,
       97, 122, 127, 128, 5,
       129, 155, 170, 171, 5,

 // slots: signature, parameters, type, tag, flags
       172, 191, 198, 202, 9,
       203, 224, 225, 229, 9,
       230, 251, 252, 256, 9,
       257, 274, 280, 284, 9,
       285, 302, 310, 314, 9,
       315, 328, 329, 333, 9,
       334, 348, 349, 353, 9,
       354, 362, 363, 367, 9,
       368, 405, 430, 434, 9,
       435, 463, 485, 489, 9,
       490, 504, 505, 509, 9,
       510, 536, 545, 549, 9,
       550, 564, 575, 579, 9,
       580, 610, 630, 634, 9,
       635, 661, 670, 674, 9,
       675, 713, 742, 746, 9,
       747, 763, 764, 768, 9,
       769, 794, 811, 815, 9,
       816, 837, 838, 842, 9,
       843, 864, 865, 869, 9,
       870, 906, 925, 929, 9,
       930, 967, 1015, 1019, 9,
       1020, 1075, 1116, 1120, 9,
       1121, 1163, 1180, 1184, 9,
       1185, 1214, 1232, 1236, 9,
       1237, 1249, 1256, 1257, 9,
       1258, 1288, 1314, 1315, 9,
       1316, 1342, 1398, 1399, 9,
       1400, 1422, 1431, 1432, 9,
       1433, 1447, 1448, 1452, 9,
       1453, 1473, 1478, 1479, 9,
       1480, 1499, 1509, 1510, 9,
       1511, 1532, 1544, 1545, 9,
       1546, 1571, 1588, 1589, 9,
       1590, 1616, 1633, 1634, 9,
       1635, 1658, 1672, 1673, 9,
       1674, 1696, 1709, 1710, 9,
       1711, 1733, 1746, 1747, 9,
       1748, 1768, 1780, 1781, 9,
       1782, 1798, 1806, 1807, 9,
       1808, 1832, 1847, 1848, 9,
       1849, 1868, 1878, 1879, 9,
       1880, 1902, 1903, 1907, 9,
       1908, 1930, 1931, 1935, 9,
       1936, 1960, 1977, 1981, 9,
       1982, 2008, 2025, 2029, 9,

 // properties: name, type, flags
       2030, 2040, 0x01015003, 		 // bool AsyncMode
       2045, 2057, 0x01015003, 		 // bool AutoDisable
       2062, 2079, 0x02015003, 		 // int BinaryConversion
       2083, 2096, 0x01005001, 		 // bool CapAddMarker
       2101, 2127, 0x01005001, 		 // bool CapCompareFirmwareVersion
       2132, 2150, 0x01005001, 		 // bool CapErasableMedium
       2155, 2175, 0x01005001, 		 // bool CapInitializeMedium
       2180, 2201, 0x01005001, 		 // bool CapMediumIsAvailable
       2206, 2224, 0x02005001, 		 // int CapPowerReporting
       2228, 2244, 0x01005001, 		 // bool CapPrintContent
       2249, 2269, 0x01005001, 		 // bool CapPrintContentFile
       2274, 2299, 0x01005001, 		 // bool CapRetrieveCurrentMarker
       2304, 2322, 0x01005001, 		 // bool CapRetrieveMarker
       2327, 2355, 0x01005001, 		 // bool CapRetrieveMarkerByDateTime
       2360, 2387, 0x01005001, 		 // bool CapRetrieveMarkersDateTime
       2392, 2403, 0x02005001, 		 // int CapStation
       2407, 2430, 0x01005001, 		 // bool CapStatisticsReporting
       2435, 2453, 0x01005001, 		 // bool CapStorageEnabled
       2458, 2481, 0x01005001, 		 // bool CapSuspendPrintContent
       2486, 2509, 0x01005001, 		 // bool CapSuspendQueryContent
       2514, 2532, 0x01005001, 		 // bool CapUpdateFirmware
       2537, 2557, 0x01005001, 		 // bool CapUpdateStatistics
       2562, 2575, 0x01005001, 		 // bool CapWaterMark
       2580, 2596, 0x0a005001, 		 // QString CheckHealthText
       2604, 2612, 0x01005001, 		 // bool Claimed
       2617, 2642, 0x0a005001, 		 // QString ControlObjectDescription
       2650, 2671, 0x02005001, 		 // int ControlObjectVersion
       2675, 2685, 0x02005001, 		 // int DataCount
       2689, 2706, 0x01015003, 		 // bool DataEventEnabled
       2711, 2729, 0x0a005001, 		 // QString DeviceDescription
       2737, 2751, 0x01015003, 		 // bool DeviceEnabled
       2756, 2767, 0x0a005001, 		 // QString DeviceName
       2775, 2788, 0x01015003, 		 // bool FlagWhenIdle
       2793, 2806, 0x01015003, 		 // bool FreezeEvents
       2811, 2827, 0x04005001, 		 // qlonglong MediumFreeSpace
       2837, 2846, 0x0a005001, 		 // QString MediumID
       2854, 2872, 0x01005001, 		 // bool MediumIsAvailable
       2877, 2888, 0x04005001, 		 // qlonglong MediumSize
       2898, 2909, 0x02005001, 		 // int OpenResult
       2913, 2922, 0x02005001, 		 // int OutputID
       2926, 2938, 0x02015003, 		 // int PowerNotify
       2942, 2953, 0x02005001, 		 // int PowerState
       2957, 2968, 0x02005001, 		 // int ResultCode
       2972, 2991, 0x02005001, 		 // int ResultCodeExtended
       2995, 3020, 0x0a005001, 		 // QString ServiceObjectDescription
       3028, 3049, 0x02005001, 		 // int ServiceObjectVersion
       3053, 3059, 0x02005001, 		 // int State
       3063, 3071, 0x02015003, 		 // int Station
       3075, 3090, 0x01015003, 		 // bool StorageEnabled
       3095, 3105, 0x01005001, 		 // bool Suspended
       3110, 3120, 0x01015003, 		 // bool WaterMark
       3125, 3133, 0x0a055003, 		 // QString control

        0        // eod
};

static const char *qt_meta_stringdata_OPOS__IOPOSElectronicJournal_1_10() {
    static const char stringdata0[] = {
    "OPOS::IOPOSElectronicJournal_1_10\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "AddMarker(QString)\0Marker\0int\0\0CancelPrintContent()\0\0int\0\0CancelQueryContent()\0"
    "\0int\0\0CheckHealth(int)\0Level\0int\0\0ClaimDevice(int)\0Timeout\0int\0\0ClearInput()\0\0int\0\0ClearOutput()\0\0int\0\0Close()\0\0int\0\0CompareFirmwareVersion(QString,int&)\0FirmwareFileName,pResult\0int\0\0DirectIO(int,int&,QString&)\0"
    "Command,pData,pString\0int\0\0EraseMedium()\0\0int\0\0InitializeMedium(QString)\0MediumID\0int\0\0Open(QString)\0DeviceName\0int\0\0PrintContent(QString,QString)\0FromMarker,ToMarker\0int\0\0PrintContentFile(QString)\0FileName\0"
    "int\0\0QueryContent(QString,QString,QString)\0FileName,FromMarker,ToMarker\0int\0\0ReleaseDevice()\0\0int\0\0ResetStatistics(QString)\0StatisticsBuffer\0int\0\0ResumePrintContent()\0\0int\0\0ResumeQueryContent()\0\0int\0\0RetrieveCurrentMarker(int,QString&)\0"
    "MarkerType,pMarker\0int\0\0RetrieveMarker(int,int,int,QString&)\0MarkerType,SessionNumber,DocumentNumber,pMarker\0int\0\0RetrieveMarkerByDateTime(int,QString,QString,QString&)\0MarkerType,DateTime,MarkerNumber,pMarker\0"
    "int\0\0RetrieveMarkersDateTime(QString,QString&)\0Marker,pDateTime\0int\0\0RetrieveStatistics(QString&)\0pStatisticsBuffer\0int\0\0SOData(int)\0Status\0\0\0SODirectIO(int,int&,QString&)\0EventNumber,pData,pString\0\0\0SOError(int,int,int,int&)\0"
    "ResultCode,ResultCodeExtended,ErrorLocus,pErrorResponse\0\0\0SOOutputComplete(int)\0OutputID\0\0\0SOProcessID()\0\0int\0\0SOStatusUpdate(int)\0Data\0\0\0SetAsyncMode(bool)\0AsyncMode\0\0\0SetAutoDisable(bool)\0AutoDisable\0"
    "\0\0SetBinaryConversion(int)\0BinaryConversion\0\0\0SetDataEventEnabled(bool)\0DataEventEnabled\0\0\0SetDeviceEnabled(bool)\0DeviceEnabled\0\0\0SetFlagWhenIdle(bool)\0FlagWhenIdle\0\0\0SetFreezeEvents(bool)\0FreezeEvents\0"
    "\0\0SetPowerNotify(int)\0PowerNotify\0\0\0SetStation(int)\0Station\0\0\0SetStorageEnabled(bool)\0StorageEnabled\0\0\0SetWaterMark(bool)\0WaterMark\0\0\0SuspendPrintContent()\0\0int\0\0SuspendQueryContent()\0\0int\0\0UpdateFirmware(QString)\0"
    "FirmwareFileName\0int\0\0UpdateStatistics(QString)\0StatisticsBuffer\0int\0\0"
    "AsyncMode\0bool\0AutoDisable\0bool\0BinaryConversion\0int\0CapAddMarker\0bool\0CapCompareFirmwareVersion\0bool\0CapErasableMedium\0bool\0CapInitializeMedium\0"
    "bool\0CapMediumIsAvailable\0bool\0CapPowerReporting\0int\0CapPrintContent\0bool\0CapPrintContentFile\0bool\0CapRetrieveCurrentMarker\0bool\0CapRetrieveMarker\0bool\0CapRetrieveMarkerByDateTime\0bool\0CapRetrieveMarkersDateTime\0"
    "bool\0CapStation\0int\0CapStatisticsReporting\0bool\0CapStorageEnabled\0bool\0CapSuspendPrintContent\0bool\0CapSuspendQueryContent\0bool\0CapUpdateFirmware\0bool\0CapUpdateStatistics\0bool\0CapWaterMark\0bool\0CheckHealthText\0"
    "QString\0Claimed\0bool\0ControlObjectDescription\0QString\0ControlObjectVersion\0int\0DataCount\0int\0DataEventEnabled\0bool\0DeviceDescription\0QString\0DeviceEnabled\0bool\0DeviceName\0QString\0FlagWhenIdle\0bool\0FreezeEvents\0"
    "bool\0MediumFreeSpace\0qlonglong\0MediumID\0QString\0MediumIsAvailable\0bool\0MediumSize\0qlonglong\0OpenResult\0int\0OutputID\0int\0PowerNotify\0int\0PowerState\0int\0ResultCode\0int\0ResultCodeExtended\0int\0ServiceObjectDescription\0"
    "QString\0ServiceObjectVersion\0int\0State\0int\0Station\0int\0StorageEnabled\0bool\0Suspended\0bool\0WaterMark\0bool\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + 0];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
    }

    return data;
};

const QMetaObject IOPOSElectronicJournal_1_10::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_OPOS__IOPOSElectronicJournal_1_10(),
qt_meta_data_OPOS__IOPOSElectronicJournal_1_10 }
};

void *IOPOSElectronicJournal_1_10::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_OPOS__IOPOSElectronicJournal_1_10()))
        return static_cast<void*>(const_cast<IOPOSElectronicJournal_1_10*>(this));
    return QAxObject::qt_metacast(_clname);
}

