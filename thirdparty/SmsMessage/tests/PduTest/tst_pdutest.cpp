/* @file Тесты для декодирования сообщений из формата PDU. */

// Проект
#include "tst_pdutest.h"
#include "smspdudecoder.h"
#include "sms.h"
#include "smspduencoder.h"

PduTest::PduTest()
{
}

void PduTest::initTestCase()
{
    mValidMessagesFile.setFileName(":/valid_messages.txt");
    if (!mValidMessagesFile.open(QFile::ReadOnly))
    {
		QFAIL("Can't open valid_messages.txt");
    }

    while (!mValidMessagesFile.atEnd())
    {
        QByteArray line = mValidMessagesFile.readLine();
		line.chop(2);
        mValidMessages << line;
	}
}

void PduTest::cleanupTestCase()
{
    mValidMessagesFile.close();
}

void PduTest::swapSemiOctets()
{
	QByteArray swappedOctets = QByteArray::fromHex("01f34a");
	QCOMPARE(SmsPduDecoder::swapSemiOctets(swappedOctets), QByteArray::fromHex("103fa4"));
	swappedOctets = QByteArray::fromHex("7238880900f1");
	QCOMPARE(SmsPduDecoder::swapSemiOctets(swappedOctets), QByteArray::fromHex("27838890001f"));
	QByteArray data = QByteArray::fromHex
    QBENCHMARK
    {
		SmsPduDecoder::swapSemiOctets(data);
	}
}

void PduTest::septetsToOctets()
{
	QFETCH(QByteArray, septets);
	QFETCH(QByteArray, octets);
	QCOMPARE(SmsPduDecoder::septetsToOctets(septets, octets.size()), octets);
}

void PduTest::septetsToOctets_data()
{
	QTest::addColumn<QByteArray>("septets");
	QTest::addColumn<QByteArray>("octets");

	QTest::newRow("hellohello")
			<< QByteArray::fromHex("E8329BFD4697D9EC37")
			<< QByteArray::fromHex("68656c6c6f68656c6c6f");

	QTest::newRow("Balance")
			<< QByteArray::fromHex("c2 30 3b ec 1e 97 1b")
			<< QByteArray("Balance");

	QTest::newRow("Hello!!!")
			<< QByteArray::fromHex("C8 32 9B FD 0E 85 42")
			<< QByteArray::fromHex("48 65 6C 6C 6F 21 21 21");

}

void PduTest::emptySms()
{
	QByteArray data;
	SmsPart part = Sms::decode(data);
	QVERIFY(!part.isValid());
	QCOMPARE(part.getText(), QString("[missing text]"));
	QCOMPARE(part.getPartCount(), 1);
	QCOMPARE(part.getPartNumber(), 0);
	QCOMPARE(part.getPartId(), QByteArray());
}

void PduTest::decodeSinglePart()
{
	QFETCH(QString, data);
	QFETCH(bool, isValid);
	QFETCH(QDateTime, dateTime);
	QFETCH(QString, senderAddress);
	QFETCH(QString, text);
	QFETCH(int, partNumber);
	QFETCH(int, size);

	SmsPart part = Sms::decode(data);
	QCOMPARE(part.isValid(), isValid);
	QTextCodec *codec = QTextCodec::codecForName("UTF-8");
	QCOMPARE(part.getText(), codec->toUnicode(text.toLatin1()));
	QCOMPARE(part.getSenderAddress(), senderAddress);
	QVERIFY(part.getDateTime().isValid());
	QCOMPARE(part.getDateTime(), dateTime);
	QCOMPARE(part.getPartNumber(), partNumber);
	QCOMPARE(part.getPartCount(), size);
}

void PduTest::decodeSinglePart_data()
{
	QTest::addColumn<QString>("data");
	QTest::addColumn<bool>("isValid");
	QTest::addColumn<QDateTime>("dateTime");
	QTest::addColumn<QString>("senderAddress");
	QTest::addColumn<QString>("text");
	QTest::addColumn<int>("partNumber");
	QTest::addColumn<int>("size");

	QTest::newRow("hellohello")
			<< "07917283010010F5040BC87238880900F10000013092516195800AE8329BFD4697D9EC37"
			<< true
			<< QDateTime(QDate(2010, 3, 29), QTime(15, 16, 59))
			<< QString("+27838890001")
			<< QString("hellohello")
			<< 0
			<< 1;

	QTest::newRow("Hello World!")
			<< "07919761989901F0040B919701119905F80000211062320150610CC8329BFD065DDF72363904"
			<< true
			<< QDateTime(QDate(2012, 1, 26), QTime(23, 10, 5))
			<< QString("+79101199508")
			<< QString("Hello World!")
			<< 0
			<< 1;

	QTest::newRow("mts.r")
			<< "07919761980622F04006D04DEA100008111091313362218A050003EE0302043104490435044104420432002E002004230441043B043E04320438044F0020043E043A043004370430043D0438044F002004430441043B044304330020043D0435002004380437043C0435043D044F044E04420441044F002E0020041F043E04340440043E0431043D043E0441044204380020043D04300020006D00740073002E0072"
			<< true
			<< QDateTime(QDate(2011, 1, 19), QTime(13, 33, 26))
			<< QString("MTC")
            << QString(mValidMessages[2])
			<< 1
			<< 3;

	QTest::newRow("u")
			<< "07919761980622F04406D04DEA1000081110913133622108050003EE03030075"
			<< true
			<< QDateTime(QDate(2011, 1, 19), QTime(13, 33, 26))
			<< QString("MTC")
			<< QString("u")
			<< 2
			<< 3;

	QTest::newRow("Balance")
			<< "07919761980612F2400ED0C2303BEC1E971B0008111171613102618C0500036F0201041C0438043D04430441003A00340035003200300039002C003800370440002C041B0438043C04380442003A00350030003000300030003000300030044000200412044B0020043C043E043604350442043500200431044B044104420440043E0020043F043E043F043E043B043D04380442044C00200441044704350442003A0020002A0031"
			<< true
			<< QDateTime(QDate(2011, 11, 17), QTime(16, 13, 20))
			<< QString("Balance")
            << QString(mValidMessages[0])
			<< 0
			<< 2;
}

void PduTest::decodeMessage()
{
	QFETCH(QStringList, data);
	QFETCH(bool, isValid);
	QFETCH(QDateTime, dateTime);
	QFETCH(QString, senderAddress);
	QFETCH(QByteArray, text);

	QList<SmsPart> parts;
	foreach (const QString &s, data)
    {
		parts << Sms::decode(s);
    }

	QCOMPARE(parts.size(), data.size());
	QList<Sms> messages = Sms::join(parts);
	QCOMPARE(parts.size(), data.size());

	Sms message = messages[0];
	QCOMPARE(message.isValid(), isValid);
	QCOMPARE(message.getDateTime(), dateTime);
	QCOMPARE(message.getSenderAddress(), senderAddress);
	QTextCodec *codec = QTextCodec::codecForName("UTF-8");
	QCOMPARE(message.getText(), codec->toUnicode(text));
}

void PduTest::decodeMessage_data()
{
	QTest::addColumn<QStringList>("data");
	QTest::addColumn<bool>("isValid");
	QTest::addColumn<QDateTime>("dateTime");
	QTest::addColumn<QString>("senderAddress");
	QTest::addColumn<QByteArray>("text");

	QStringList list;
	list << "07919761980612F2400ED0C2303BEC1E971B0008111171613102618C0500036F0201041C0438043D04430441003A00340035003200300039002C003800370440002C041B0438043C04380442003A00350030003000300030003000300030044000200412044B0020043C043E043604350442043500200431044B044104420440043E0020043F043E043F043E043B043D04380442044C00200441044704350442003A0020002A0031";
	list << "07919761980612f2440ed0c2303bec1e971b000811117161310261140500036f020200310031002a0031003200330023";

	QTest::newRow("Balance")
			<< list
			<< true
			<< QDateTime(QDate(2011, 11, 17), QTime(16, 13, 20))
			<< QString("Balance")
            << mValidMessages[1];
}

void PduTest::encode()
{
	QCOMPARE(SmsPduEncoder::encode("12345678"), QByteArray::fromHex("31 d9 8c 56 b3 dd 70"));
	QCOMPARE(SmsPduEncoder::encode("*101#"), QByteArray::fromHex("AA182C3602"));
}

QTEST_APPLESS_MAIN(PduTest)
