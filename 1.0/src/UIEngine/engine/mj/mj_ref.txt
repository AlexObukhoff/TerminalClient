MJ usage & objects reference
for build: '0.9.0018' 20070130 (We don\'t need poison for roam)';

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
состав библиотеки
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

mj.js
  основной файл библиотеки - содержит прототипы большинства необходимых
  для работы объектов + инициализацию глобальных объектов

mj_dta.js
  функции для работы с преобразованием данных, строк и т.д.

mj_win.js
  работа с разными окнами обозревателей. сюда же будет добавлена работа с
  фреймами

mj_dyn.js
  функции для обеспечения динамической подгрузки файлов с java-скриптами

mj_cybobj.js
  файл для создания интерфейсов для терминалов самообслуживания CyberPlat

  - - -

mj_obs.js
  "исключенный" пока код - не ясно, будет использоватья и дорабатываться,
  иль нет. Посмотрим, какие будут идеи...

mj_4comp.js
  файл из дремучей ветки разработки - нада бы сравнить с mj.js и вычленить
  идеи, кот. мог забыть

  - - -

mj.css
  стиль для отладочной консоли MJ

mj_ref.txt
  данный файл - описание функциональности/документация библиотеки MJ

mj_builds.txt
  история билдов MJ



-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
включение библиотеки
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

// - - - - - - -
(если)
1. основной файл включается в HTML-секции HEAD:

[code]
<head>
	<script src="mj.js" language="javascript" type="text/javascript"></script>
	...
[/code]

при этом инициализация должна производиться дополнительно принудительным
вызовом функции init основного глобального объекта библиотеки mj_G в
HTML-секции BODY,
например:

[code]
<body>
	<script>
	mj_G.init();
	</script>


// - - - - - - -
(если)
2. основной файл включается в HTML-секции BODY:
[code]
<body>
	<script src="mj.js" language="javascript" type="text/javascript"></script>
	...
[/code]

при этом доп. инициализация не требуется.



=============================================================================
глобальные функции библиотеки
=============================================================================

// - - - - - - - [mj.js]
// добавить "слепой" HTML-код в body - работает до того, как body закроется и
//   ДОМ будет построен.
function MjAddBlindHTML($__s)

// - - - - - - - [mj.js]
// получить тек. время (в миллисекундах) от A.D.
function MjGetMeter()

// - - - - - - - [mj.js]
// входит ли точка в прямоугольник?
// xp, yp - point, (x1, y1 - x2,y2) - rect
function MjIsPointInRect($xp, $yp, $x1, $y1, $x2, $y2) {

// - - - - - - - [mj.js]
// вывести соообщение в отладочную консоль ($mj_g_isDebug == true)
// $__m  - сообщение
// [$__c] - цвет фона в формате #xxxxxx
function MjCRIO($__m, $__c)

// - - - - - - - [mj.js]
// вывести содержимое объекта соообщение в отладочную консоль
//   ($mj_g_isDebug == true)
// $__o - объект для дампа
function MjCRIOD($__o)



// - - - - - - - [mj_dta.js]
// преобразовать число в hex-символ
function MjDig2HexChar($__digit)

// - - - - - - - [mj_dta.js]
// преобразовать hex-символ в число
function MjString2HexSeq($__s)

// - - - - - - - [mj_dta.js]
// преобразовать строку в строку сплошных hex-последовательностей
// UNICODE not supported
function MjString2HexSeq($__s)

// - - - - - - - [mj_dta.js]
// проXORить посимвольно строку $__s по ключевому слову в $__spw. вернуть результат.
// укзатель по $__spw перемещается циклически
// UNICODE not supported
function MjStringXorHexSeq($__s, $__spw)



// - - - - - - - [mj_win.js]
// открыть документ $__fname в новом объекте браузера без тулбаров и
//   возможности изменять размеры, но со скроллом.
// $__w, $__h - ширина и высота окна в пикселях - используются, если указаны
function MjOpenWindowNN($__fname, $__w, $__h)



// - - - - - - - [mj_cybobj.js]
// преобразовать координату $__x (рассчианную для 1280x1024) в текущие реальные
//   размеры
function GTX($__x)

// - - - - - - - [mj_cybobj.js]
// преобразовать координату $__y (рассчианную для 1280x1024) в текущие реальные
//   размеры
function GTY($__y)








=============================================================================
глобальные свойства/перевменные библиотеки
=============================================================================

// - - - - - - - [mj.js]
// включена отладночная консоль?
$mj_g_isDebug = false/true

// - - - - - - - [mj.js]
// версия+билд MJ в цифрах и буквах :)
$mj_g_mjver		= '0.9.0018';
$mj_g_mjvertxt	= '20070130 (We don\'t need poison for roam)';

// - - - - - - - [mj.js]
// глобальный объект типа MJ_G
// создается только одна копия!!!
(MJ_G) mj_G;

// - - - - - - - [mj.js]
// глобальный объект типа MJ_RunTimer для созания задач
// создается только одна копия!!!
(MJ_RunTimer) mj_RT;



// - - - - - - - [mj_cybobj.js]
// глобальный массив для хранения всех обектов, типа MJ_VP (viewport-ов)
(MJ_VP) mj_g_avp;



// - - - - - - - [mj_cybobj.js]
// папка для хранения картинок (меняется для поддержки кожур и локализаций)
$mj_g_img_pth = 'i/';
$mg_g_vp_bg = '#cccccc';
$mg_g_vp_debug = true;




=============================================================================
объекты библиотеки
=============================================================================


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// - - - - - - - [mj.js]
MJ_G - глобальный runtime объект
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

назначение:
- определение типа и функциональности браузера (пока только поиск и поддержка DOM-модели)
- определение высоты и ширины видимого "окна" браузера
-

функциональность:



внутренние свойства:

// - - - - - - - MJ_G [mj.js]
MJ_G._a - массив, перечисляющий все объекты типа MJ_V (или порожденные от него),
			собственно, основная ("несущая") конструкция в глобальном объекте
			mj_G .

		расшифровка типов записей массива:

		'l' - label/id/name: id-именование элемента
		't' - тип элемента (обычно 'DIV' или 'IMG')
		'n' - node object in DOM. объект "node" в DOM-а,
				возвращается функцией document.createElement.
				На данный момент, объекты создаются только от document.body
		'i' - 'ID'-объект элемента в модели браузера (GetElementById)
		'p' - индекс элемента-родителя в данном массиве
		'o' - ссылка на объект, данного элемента, имеющего тип, порожденный от
				класса MJ_V
		'hl' - функция-обработчик левого щелчка мышью
		'a' - признак активности (!пассивности) элемента для
			    клавиатурного ввода и щелчков мышью






/---------------------------------------------------------------------------
| методы:
\---------------------------------------------------------------------------
//

// - - - - - - - MJ_G [mj.js]
// инициализация библиотеки MJ
// $__i - зачем планировался, хоть убейте, не помню
MJ_G.prototype.init = function($__i)

// - - - - - - - MJ_G [mj.js]
// создать объект в ДОМе (используется классом MJ_V для создания объектов)
//
// $__pa	- элемент-прародитель данного (для DOM-а)
//             !!! (ПОКА НЕ РЕАЛИЗОВАНО), всегда указывать '-1' !!!
//				'-1' - создать объект от BODY
// $__typ	- тип объекта. На данный момент применяется 'IMG' и 'DIV'
// $__id	- id (label, name) - id объекта в DOM-е
//			   !!! во избежание каши, должен быть всегда уникален !!!
// $__attr  - ассоциативный массив доп. аттрибутов (при инициализации) объекта
//			   !!! style работать не будет, т.к. CSS-свойства
//     			появляются только после добавления объекта в DOM !!!
MJ_G.prototype.AddDOM = function($__pa, $__typ, $__id, $__attr)




-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// - - - - - - - [mj.js]
MJ_V - объект для создания VIEW-елемента
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

// - - - - - - - MJ_G [mj.js]
// конструктор объекта (см. описание MJ_G.prototype.AddDOM )
//
MJ_V($__pa, $__typ, $__lab, $__attr)


// - - - - - - - MJ_G [mj.js]
// установить видимость текущего элемента
// $__u - ==1: применить сразу, ==0 - только при вызове Redraw()
// $__v - ==1: видимый, ==0: невидимый
MJ_V.prototype.Visi = function($__u, $__v) {

// - - - - - - - MJ_G [mj.js]
// установить абсолютную позоцию элемента в окне браузера
// $__u - ==1: применить сразу, ==0 - только при вызове Redraw()
// $__v - ==1: абсолютная позиция, ==0: относительная позиция
MJ_V.prototype.AbsPos = function($__u, $__v) {

// - - - - - - - MJ_G [mj.js]
// переместить элемент в указанную позицию
// $__u - ==1: применить сразу, ==0 - только при вызове Redraw()
// $__x, $__y: координаты в окне браузера
MJ_V.prototype.MoveTo = function($__u, $__x, $__y) {

// - - - - - - - MJ_G [mj.js]
// установить ширину и высоту объекта
// $__u - ==1: применить сразу, ==0 - только при вызове Redraw()
// $__w, $__h: ширина и высота
MJ_V.prototype.SizeTo = function($__u, $__w, $__h) {

// - - - - - - - MJ_G [mj.js]
// установить непрозрачный цвет фона
// $__u - ==1: применить сразу, ==0 - только при вызове Redraw()
// $__v - значение цвета в #xxxxxx
MJ_V.prototype.SetBG = function($__u, $__v) {

// - - - - - - - MJ_G [mj.js]
// установить значение проозрачности
// $__u - ==1: применить сразу, ==0 - только при вызове Redraw()
// $__op - значение прозрачности (от 0 до 1)
MJ_V.prototype.Opacity = function($__u, $__op) {

// - - - - - - - MJ_G [mj.js]
// установить значение проозрачности
// $__u - ==1: применить сразу, ==0 - только при вызове Redraw()
// $__bo - установить вид и цвет бордюра (пример: 1px dotted red)
MJ_V.prototype.Border = function($__u, $__bo) {

// - - - - - - - MJ_G [mj.js]
//
MJ_V.prototype.Redraw = function() {

// - - - - - - - MJ_G [mj.js]
// установить значение CSS-аттрибута
// $__an:  имя аттрибута
// $__av:  значение аттрибута
MJ_V.prototype.Setp = function($__an, $__av) {

// - - - - - - - MJ_G [mj.js]
// добавить обработчик левого клика мыши по объекту
MJ_V.prototype.AddHandler = function($_fname) {
	mj_G._a[this.i]['hl'] = $_fname;
}



-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// - - - - - - - [mj.js]
// MJ_VI - наследник от MJ_V
// создание картинки на базе объекта MJ_V
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

// - - - - - - - MJ_G [mj.js]
// $__pa: id предыдущего в массиве mj_G._a
// $__lab: label/id/name в DOM-е браузера. Не должен дупится
// $__src: full image  filename
function MJ_VI($__pa, $__lab, $__src) {


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// - - - - - - - [mj.js]
// MJ_VD - наследник от MJ_V
// создание DIV на базе объекта MJ_V

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

// - - - - - - - MJ_G [mj.js]
// $__pa: id предыдущего в массиве mj_G._a
// $__lab: label/id/name в DOM-е браузера. Не должен дупится
function MJ_VD($__pa, $__lab) {




MJ_RunTimer



// --------------------------------------------------------
[mj_win.js]
MjOpenWindowNN($__fname, $__w, $__h);

создание окна браузера без тулбара и меню
